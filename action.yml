name: run-digger
description: Manage terraform collaboration
author: Digger

inputs:
  setup-aws:
    description: Setup AWS
    required: false
    default: 'false'
  aws-access-key-id:
    description: AWS access key id
    required: false
  aws-secret-access-key:
    description: AWS secret access key
    required: false
  aws-role-to-assume:
    description: ARN of AWS IAM role to assume using OIDC
    required: false
  aws-region:
    description: AWS region
    required: false
    default: us-east-1
  setup-google-cloud:
    description: Setup google cloud
    required: false
    default: 'false'
  google-auth-credentials:
      description: Service account key used got Google auth (mutually exclusive with 'google-workload-identity-provider' input)
      required: false
  google-workload-identity-provider:
      description: Workload identity provider to be used for Google OIDC auth (mutually exclusive with 'google-auth-credentials' input)
      required: false
  google-workload-identity-provider-audience:
      description: "'audience' parameter configured in Google's Workload Identity Provider (if specified). To be used when the 'google-workload-identity-provider' input is specified"
      required: false
  google-service-account:
      description: Service account to be used when the 'google-workload-identity-provider' input is specified)
      required: false
  setup-terragrunt:
    description: Setup terragrunt
    required: false
    default: 'false'
  terragrunt-version:
    description: Terragrunt version
    required: false
    default: v0.45.4
  setup-terraform:
    description: Setup terraform
    required: false
    default: 'false'
  terraform-version:
    description: Terraform version
    required: false
    default: v1.4.5
  configure-checkout:
    description: Configure checkout. Beware that this will overwrite any changes in the working directory
    required: false
    default: 'true'
  upload-plan-destination:
    description: Destination to upload the plan to. gcp and github are currently supported
    required: false
  setup-checkov:
    description: Setup Checkov
    required: false
    default: 'false'
  checkov-version:
    description: Checkov version
    required: false
    default: '2.3.245'
  disable-locking:
    description: Disable locking
    required: false
    default: 'false'
  digger-token:
    description: Digger token
    required: false
  digger-hostname:
    description: Digger hostname
    required: false
    default: 'https://cloud.digger.dev'
  digger-organisation:
    description: The name of your digger organisation
    required: false
  setup-tfenv:
    description: Setup tfenv
    required: false
    default: 'false'
  post-plans-as-one-comment:
    description: Post plans as one comment
    required: false
    default: 'false'
  reporting-strategy:
    description: 'comments_per_run or latest_run_comment, anything else will default to original behavior of multiple comments'
    required: false
    default: 'comments_per_run'
outputs:
  output:
    value: ${{ steps.digger.outputs.output }}
    description: The terraform output

runs:
  using: composite
  steps:
    - name: Validate Input Configuration for Google
      run: |
        if [[ -z ${{ toJSON(inputs.google-auth-credentials) }} && -z "${{ inputs.google-workload-identity-provider }}" ]]; then
          echo "Either 'google-auth-credentials' or 'google-workload-identity-provider' input must be specified with 'setup-google-cloud'"
        elif [[ ! -z "${{ inputs.google-workload-identity-provider }}" && -z "${{ inputs.google-service-account }}" ]]; then
          echo "'google-service-account' input must be specified with 'google-workload-identity-provider'"
        else
          exit 0
        fi
        exit 1
      shell: bash
      if: inputs.setup-google-cloud == 'true'
    - uses: actions/checkout@v3
      with:
        clean: false
        ref: refs/pull/${{ github.event.issue.number }}/merge
      if: ${{ github.event_name == 'issue_comment' && inputs.configure-checkout == 'true' }}
    - uses: actions/checkout@v3
      with:
        clean: false
      if: ${{ github.event_name != 'issue_comment' && inputs.configure-checkout == 'true' }}
    - name: Set up Google Auth Using A Service Account Key
      uses: google-github-actions/auth@v1
      with:
        credentials_json: '${{ inputs.google-auth-credentials }}'
      if: ${{ inputs.setup-google-cloud == 'true' && inputs.google-auth-credentials != '' }}

    - name: Set up Google Auth Using Workload Identity Federation
      uses: google-github-actions/auth@v1
      with:
        token_format: access_token
        service_account: ${{ inputs.google-service-account }}
        workload_identity_provider: ${{ inputs.google-workload-identity-provider }}
        audience: ${{ inputs.google-workload-identity-provider-audience }}
      if: ${{ inputs.setup-google-cloud == 'true' && inputs.google-workload-identity-provider != '' }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      if: inputs.setup-google-cloud == 'true'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}
      if: ${{ inputs.setup-aws == 'true' && inputs.aws-role-to-assume == '' }}

    - name: Configure OIDC AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ inputs.aws-role-to-assume }}
        aws-region: ${{ inputs.aws-region }}
      if: ${{ inputs.setup-aws == 'true' && inputs.aws-role-to-assume != '' }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ inputs.terraform-version }}
        terraform_wrapper: false
      if: inputs.setup-terraform == 'true'

    - name: Setup tfenv
      uses: rhythmictech/actions-setup-tfenv@v0.1.2
      if: inputs.setup-tfenv == 'true'

    - name: Setup Terragrunt
      uses: autero1/action-terragrunt@v1.3.2
      with:
        terragrunt_version: ${{ inputs.terragrunt-version }}
      if: inputs.setup-terragrunt == 'true'

    - name: Setup Checkov
      run: |
        python3 -m venv .venv
        source .venv/bin/activate
        pip3 install --upgrade pip
        pip3 install --upgrade setuptools
        pip3 install -U checkov==${{ inputs.checkov-version }}
      shell: bash
      if: inputs.setup-checkov == 'true'

    - name: build and run digger
      if: ${{ !startsWith(github.action_ref, 'v') }}
      shell: bash
      env:
        PLAN_UPLOAD_DESTINATION: ${{ inputs.upload-plan-destination }}
        ACTIVATE_VENV: ${{ inputs.setup-checkov == 'true' }}
        DISABLE_LOCKING: ${{ inputs.disable-locking == 'true' }}
        DIGGER_TOKEN: ${{ inputs.digger-token }}
        DIGGER_ORGANISATION: ${{ inputs.digger-organisation }}
        DIGGER_HOSTNAME: ${{ inputs.digger-hostname }}
        ACCUMULATE_PLANS: ${{ inputs.post-plans-as-one-comment == 'true' }}
        REPORTING_STRATEGY: ${{ inputs.reporting-strategy }}
      run: |
          cd ${{ github.action_path }}
          go build -o digger ./cmd/digger
          chmod +x digger
          mv digger /usr/local/bin/digger
          cd ${{ github.workspace }}
          digger
    - name: run digger
      if: ${{ startsWith(github.action_ref, 'v') }}
      env:
        actionref: ${{ github.action_ref }}
        PLAN_UPLOAD_DESTINATION: ${{ inputs.upload-plan-destination }}
        ACTIVATE_VENV: ${{ inputs.setup-checkov == 'true' }}
        DISABLE_LOCKING: ${{ inputs.disable-locking == 'true' }}
        DIGGER_TOKEN: ${{ inputs.digger-token }}
        DIGGER_HOSTNAME: ${{ inputs.digger-hostname }}
        ACCUMULATE_PLANS: ${{ inputs.post-plans-as-one-comment == 'true' }}
        REPORTING_STRATEGY: ${{ inputs.reporting-strategy }}
      id: digger
      shell: bash
      run: |
        curl -sL https://github.com/diggerhq/digger/releases/download/${actionref}/digger-${{ runner.os  }}-${{ runner.arch }} -o digger
        chmod +x digger
        mv digger /usr/local/bin/digger
        cd ${{ github.workspace }}
        digger
    - name: generate artifact name based on issue number or pr number
      id: artifact
      shell: bash
      run: |
          if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            echo "artifact=plans-${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          else
            echo "artifact=plans-${{ github.event.number }}" >> $GITHUB_OUTPUT
          fi
    - name: upload plan
      uses: actions/upload-artifact@v3
      with:
          name: ${{ steps.artifact.outputs.artifact }}
          path: '${{ github.workspace }}/**/*.tfplan'
          retention-days: 14
      if: ${{ inputs.upload-plan-destination == 'github' }}

branding:
  icon: globe
  color: purple
