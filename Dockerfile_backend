# Stage 1: Build the Go application
FROM golang:1.22 as builder

# Build-time argument for the commit SHA
ARG COMMIT_SHA
# Print the commit SHA
RUN echo "Commit SHA: ${COMMIT_SHA}"

# Set the working directory inside the container
WORKDIR /go/src/github.com/diggerhq/digger

# Copy all source files, excluding unnecessary files through `.dockerignore`
COPY . .

# Display Go version
RUN go version

# Build the Go application, embedding the commit SHA in the binary
RUN go build -ldflags="-X 'main.Version=${COMMIT_SHA}'" -o backend_exe ./backend/

# Stage 2: Prepare runtime environment using a slim Ubuntu image
FROM ubuntu:24.04-slim as runner

# Environment variable for Atlas version
ENV ATLAS_VERSION v0.16.0
# ARG for commit SHA for consistency, though not really necessary here
ARG COMMIT_SHA

# Set the working directory inside the runner container
WORKDIR /app

# Install necessary dependencies (combine into one RUN for fewer layers)
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    ca-certificates curl git && \
    rm -rf /var/lib/apt/lists/* && \
    update-ca-certificates

# Output commit SHA for debugging
RUN echo "Commit SHA: ${COMMIT_SHA}"

# Install Atlas
RUN curl -sSf https://atlasgo.sh | sh

# Expose port 3000
EXPOSE 3000

# Copy the built Go binary and other necessary files from the build stage
COPY --from=builder /go/src/github.com/diggerhq/digger/backend_exe /app/backend
COPY --from=builder /go/src/github.com/diggerhq/digger/backend/scripts/entrypoint.sh /app/entrypoint.sh
COPY --from=builder /go/src/github.com/diggerhq/digger/backend/migrations /app/migrations
ADD backend/templates /app/templates

# Ensure the entrypoint script is executable
RUN chmod +x /app/entrypoint.sh

# Run the entrypoint script to start the application
ENTRYPOINT ["/bin/bash", "/app/entrypoint.sh"]
