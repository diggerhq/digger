// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models_generated

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/diggerhq/digger/next/model"
)

func newInternalBlogPostTagsRelationship(db *gorm.DB, opts ...gen.DOOption) internalBlogPostTagsRelationship {
	_internalBlogPostTagsRelationship := internalBlogPostTagsRelationship{}

	_internalBlogPostTagsRelationship.internalBlogPostTagsRelationshipDo.UseDB(db, opts...)
	_internalBlogPostTagsRelationship.internalBlogPostTagsRelationshipDo.UseModel(&model.InternalBlogPostTagsRelationship{})

	tableName := _internalBlogPostTagsRelationship.internalBlogPostTagsRelationshipDo.TableName()
	_internalBlogPostTagsRelationship.ALL = field.NewAsterisk(tableName)
	_internalBlogPostTagsRelationship.BlogPostID = field.NewString(tableName, "blog_post_id")
	_internalBlogPostTagsRelationship.TagID = field.NewInt32(tableName, "tag_id")

	_internalBlogPostTagsRelationship.fillFieldMap()

	return _internalBlogPostTagsRelationship
}

type internalBlogPostTagsRelationship struct {
	internalBlogPostTagsRelationshipDo

	ALL        field.Asterisk
	BlogPostID field.String
	TagID      field.Int32

	fieldMap map[string]field.Expr
}

func (i internalBlogPostTagsRelationship) Table(newTableName string) *internalBlogPostTagsRelationship {
	i.internalBlogPostTagsRelationshipDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i internalBlogPostTagsRelationship) As(alias string) *internalBlogPostTagsRelationship {
	i.internalBlogPostTagsRelationshipDo.DO = *(i.internalBlogPostTagsRelationshipDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *internalBlogPostTagsRelationship) updateTableName(table string) *internalBlogPostTagsRelationship {
	i.ALL = field.NewAsterisk(table)
	i.BlogPostID = field.NewString(table, "blog_post_id")
	i.TagID = field.NewInt32(table, "tag_id")

	i.fillFieldMap()

	return i
}

func (i *internalBlogPostTagsRelationship) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *internalBlogPostTagsRelationship) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 2)
	i.fieldMap["blog_post_id"] = i.BlogPostID
	i.fieldMap["tag_id"] = i.TagID
}

func (i internalBlogPostTagsRelationship) clone(db *gorm.DB) internalBlogPostTagsRelationship {
	i.internalBlogPostTagsRelationshipDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i internalBlogPostTagsRelationship) replaceDB(db *gorm.DB) internalBlogPostTagsRelationship {
	i.internalBlogPostTagsRelationshipDo.ReplaceDB(db)
	return i
}

type internalBlogPostTagsRelationshipDo struct{ gen.DO }

type IInternalBlogPostTagsRelationshipDo interface {
	gen.SubQuery
	Debug() IInternalBlogPostTagsRelationshipDo
	WithContext(ctx context.Context) IInternalBlogPostTagsRelationshipDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IInternalBlogPostTagsRelationshipDo
	WriteDB() IInternalBlogPostTagsRelationshipDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IInternalBlogPostTagsRelationshipDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IInternalBlogPostTagsRelationshipDo
	Not(conds ...gen.Condition) IInternalBlogPostTagsRelationshipDo
	Or(conds ...gen.Condition) IInternalBlogPostTagsRelationshipDo
	Select(conds ...field.Expr) IInternalBlogPostTagsRelationshipDo
	Where(conds ...gen.Condition) IInternalBlogPostTagsRelationshipDo
	Order(conds ...field.Expr) IInternalBlogPostTagsRelationshipDo
	Distinct(cols ...field.Expr) IInternalBlogPostTagsRelationshipDo
	Omit(cols ...field.Expr) IInternalBlogPostTagsRelationshipDo
	Join(table schema.Tabler, on ...field.Expr) IInternalBlogPostTagsRelationshipDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IInternalBlogPostTagsRelationshipDo
	RightJoin(table schema.Tabler, on ...field.Expr) IInternalBlogPostTagsRelationshipDo
	Group(cols ...field.Expr) IInternalBlogPostTagsRelationshipDo
	Having(conds ...gen.Condition) IInternalBlogPostTagsRelationshipDo
	Limit(limit int) IInternalBlogPostTagsRelationshipDo
	Offset(offset int) IInternalBlogPostTagsRelationshipDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IInternalBlogPostTagsRelationshipDo
	Unscoped() IInternalBlogPostTagsRelationshipDo
	Create(values ...*model.InternalBlogPostTagsRelationship) error
	CreateInBatches(values []*model.InternalBlogPostTagsRelationship, batchSize int) error
	Save(values ...*model.InternalBlogPostTagsRelationship) error
	First() (*model.InternalBlogPostTagsRelationship, error)
	Take() (*model.InternalBlogPostTagsRelationship, error)
	Last() (*model.InternalBlogPostTagsRelationship, error)
	Find() ([]*model.InternalBlogPostTagsRelationship, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.InternalBlogPostTagsRelationship, err error)
	FindInBatches(result *[]*model.InternalBlogPostTagsRelationship, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.InternalBlogPostTagsRelationship) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IInternalBlogPostTagsRelationshipDo
	Assign(attrs ...field.AssignExpr) IInternalBlogPostTagsRelationshipDo
	Joins(fields ...field.RelationField) IInternalBlogPostTagsRelationshipDo
	Preload(fields ...field.RelationField) IInternalBlogPostTagsRelationshipDo
	FirstOrInit() (*model.InternalBlogPostTagsRelationship, error)
	FirstOrCreate() (*model.InternalBlogPostTagsRelationship, error)
	FindByPage(offset int, limit int) (result []*model.InternalBlogPostTagsRelationship, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IInternalBlogPostTagsRelationshipDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i internalBlogPostTagsRelationshipDo) Debug() IInternalBlogPostTagsRelationshipDo {
	return i.withDO(i.DO.Debug())
}

func (i internalBlogPostTagsRelationshipDo) WithContext(ctx context.Context) IInternalBlogPostTagsRelationshipDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i internalBlogPostTagsRelationshipDo) ReadDB() IInternalBlogPostTagsRelationshipDo {
	return i.Clauses(dbresolver.Read)
}

func (i internalBlogPostTagsRelationshipDo) WriteDB() IInternalBlogPostTagsRelationshipDo {
	return i.Clauses(dbresolver.Write)
}

func (i internalBlogPostTagsRelationshipDo) Session(config *gorm.Session) IInternalBlogPostTagsRelationshipDo {
	return i.withDO(i.DO.Session(config))
}

func (i internalBlogPostTagsRelationshipDo) Clauses(conds ...clause.Expression) IInternalBlogPostTagsRelationshipDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i internalBlogPostTagsRelationshipDo) Returning(value interface{}, columns ...string) IInternalBlogPostTagsRelationshipDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i internalBlogPostTagsRelationshipDo) Not(conds ...gen.Condition) IInternalBlogPostTagsRelationshipDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i internalBlogPostTagsRelationshipDo) Or(conds ...gen.Condition) IInternalBlogPostTagsRelationshipDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i internalBlogPostTagsRelationshipDo) Select(conds ...field.Expr) IInternalBlogPostTagsRelationshipDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i internalBlogPostTagsRelationshipDo) Where(conds ...gen.Condition) IInternalBlogPostTagsRelationshipDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i internalBlogPostTagsRelationshipDo) Order(conds ...field.Expr) IInternalBlogPostTagsRelationshipDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i internalBlogPostTagsRelationshipDo) Distinct(cols ...field.Expr) IInternalBlogPostTagsRelationshipDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i internalBlogPostTagsRelationshipDo) Omit(cols ...field.Expr) IInternalBlogPostTagsRelationshipDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i internalBlogPostTagsRelationshipDo) Join(table schema.Tabler, on ...field.Expr) IInternalBlogPostTagsRelationshipDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i internalBlogPostTagsRelationshipDo) LeftJoin(table schema.Tabler, on ...field.Expr) IInternalBlogPostTagsRelationshipDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i internalBlogPostTagsRelationshipDo) RightJoin(table schema.Tabler, on ...field.Expr) IInternalBlogPostTagsRelationshipDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i internalBlogPostTagsRelationshipDo) Group(cols ...field.Expr) IInternalBlogPostTagsRelationshipDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i internalBlogPostTagsRelationshipDo) Having(conds ...gen.Condition) IInternalBlogPostTagsRelationshipDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i internalBlogPostTagsRelationshipDo) Limit(limit int) IInternalBlogPostTagsRelationshipDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i internalBlogPostTagsRelationshipDo) Offset(offset int) IInternalBlogPostTagsRelationshipDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i internalBlogPostTagsRelationshipDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IInternalBlogPostTagsRelationshipDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i internalBlogPostTagsRelationshipDo) Unscoped() IInternalBlogPostTagsRelationshipDo {
	return i.withDO(i.DO.Unscoped())
}

func (i internalBlogPostTagsRelationshipDo) Create(values ...*model.InternalBlogPostTagsRelationship) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i internalBlogPostTagsRelationshipDo) CreateInBatches(values []*model.InternalBlogPostTagsRelationship, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i internalBlogPostTagsRelationshipDo) Save(values ...*model.InternalBlogPostTagsRelationship) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i internalBlogPostTagsRelationshipDo) First() (*model.InternalBlogPostTagsRelationship, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.InternalBlogPostTagsRelationship), nil
	}
}

func (i internalBlogPostTagsRelationshipDo) Take() (*model.InternalBlogPostTagsRelationship, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.InternalBlogPostTagsRelationship), nil
	}
}

func (i internalBlogPostTagsRelationshipDo) Last() (*model.InternalBlogPostTagsRelationship, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.InternalBlogPostTagsRelationship), nil
	}
}

func (i internalBlogPostTagsRelationshipDo) Find() ([]*model.InternalBlogPostTagsRelationship, error) {
	result, err := i.DO.Find()
	return result.([]*model.InternalBlogPostTagsRelationship), err
}

func (i internalBlogPostTagsRelationshipDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.InternalBlogPostTagsRelationship, err error) {
	buf := make([]*model.InternalBlogPostTagsRelationship, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i internalBlogPostTagsRelationshipDo) FindInBatches(result *[]*model.InternalBlogPostTagsRelationship, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i internalBlogPostTagsRelationshipDo) Attrs(attrs ...field.AssignExpr) IInternalBlogPostTagsRelationshipDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i internalBlogPostTagsRelationshipDo) Assign(attrs ...field.AssignExpr) IInternalBlogPostTagsRelationshipDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i internalBlogPostTagsRelationshipDo) Joins(fields ...field.RelationField) IInternalBlogPostTagsRelationshipDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i internalBlogPostTagsRelationshipDo) Preload(fields ...field.RelationField) IInternalBlogPostTagsRelationshipDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i internalBlogPostTagsRelationshipDo) FirstOrInit() (*model.InternalBlogPostTagsRelationship, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.InternalBlogPostTagsRelationship), nil
	}
}

func (i internalBlogPostTagsRelationshipDo) FirstOrCreate() (*model.InternalBlogPostTagsRelationship, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.InternalBlogPostTagsRelationship), nil
	}
}

func (i internalBlogPostTagsRelationshipDo) FindByPage(offset int, limit int) (result []*model.InternalBlogPostTagsRelationship, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i internalBlogPostTagsRelationshipDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i internalBlogPostTagsRelationshipDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i internalBlogPostTagsRelationshipDo) Delete(models ...*model.InternalBlogPostTagsRelationship) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *internalBlogPostTagsRelationshipDo) withDO(do gen.Dao) *internalBlogPostTagsRelationshipDo {
	i.DO = *do.(*gen.DO)
	return i
}
