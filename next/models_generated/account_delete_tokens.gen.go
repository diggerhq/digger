// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models_generated

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/diggerhq/digger/next/model"
)

func newAccountDeleteToken(db *gorm.DB, opts ...gen.DOOption) accountDeleteToken {
	_accountDeleteToken := accountDeleteToken{}

	_accountDeleteToken.accountDeleteTokenDo.UseDB(db, opts...)
	_accountDeleteToken.accountDeleteTokenDo.UseModel(&model.AccountDeleteToken{})

	tableName := _accountDeleteToken.accountDeleteTokenDo.TableName()
	_accountDeleteToken.ALL = field.NewAsterisk(tableName)
	_accountDeleteToken.Token = field.NewString(tableName, "token")
	_accountDeleteToken.UserID = field.NewString(tableName, "user_id")

	_accountDeleteToken.fillFieldMap()

	return _accountDeleteToken
}

type accountDeleteToken struct {
	accountDeleteTokenDo

	ALL    field.Asterisk
	Token  field.String
	UserID field.String

	fieldMap map[string]field.Expr
}

func (a accountDeleteToken) Table(newTableName string) *accountDeleteToken {
	a.accountDeleteTokenDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a accountDeleteToken) As(alias string) *accountDeleteToken {
	a.accountDeleteTokenDo.DO = *(a.accountDeleteTokenDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *accountDeleteToken) updateTableName(table string) *accountDeleteToken {
	a.ALL = field.NewAsterisk(table)
	a.Token = field.NewString(table, "token")
	a.UserID = field.NewString(table, "user_id")

	a.fillFieldMap()

	return a
}

func (a *accountDeleteToken) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *accountDeleteToken) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 2)
	a.fieldMap["token"] = a.Token
	a.fieldMap["user_id"] = a.UserID
}

func (a accountDeleteToken) clone(db *gorm.DB) accountDeleteToken {
	a.accountDeleteTokenDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a accountDeleteToken) replaceDB(db *gorm.DB) accountDeleteToken {
	a.accountDeleteTokenDo.ReplaceDB(db)
	return a
}

type accountDeleteTokenDo struct{ gen.DO }

type IAccountDeleteTokenDo interface {
	gen.SubQuery
	Debug() IAccountDeleteTokenDo
	WithContext(ctx context.Context) IAccountDeleteTokenDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAccountDeleteTokenDo
	WriteDB() IAccountDeleteTokenDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAccountDeleteTokenDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAccountDeleteTokenDo
	Not(conds ...gen.Condition) IAccountDeleteTokenDo
	Or(conds ...gen.Condition) IAccountDeleteTokenDo
	Select(conds ...field.Expr) IAccountDeleteTokenDo
	Where(conds ...gen.Condition) IAccountDeleteTokenDo
	Order(conds ...field.Expr) IAccountDeleteTokenDo
	Distinct(cols ...field.Expr) IAccountDeleteTokenDo
	Omit(cols ...field.Expr) IAccountDeleteTokenDo
	Join(table schema.Tabler, on ...field.Expr) IAccountDeleteTokenDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAccountDeleteTokenDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAccountDeleteTokenDo
	Group(cols ...field.Expr) IAccountDeleteTokenDo
	Having(conds ...gen.Condition) IAccountDeleteTokenDo
	Limit(limit int) IAccountDeleteTokenDo
	Offset(offset int) IAccountDeleteTokenDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAccountDeleteTokenDo
	Unscoped() IAccountDeleteTokenDo
	Create(values ...*model.AccountDeleteToken) error
	CreateInBatches(values []*model.AccountDeleteToken, batchSize int) error
	Save(values ...*model.AccountDeleteToken) error
	First() (*model.AccountDeleteToken, error)
	Take() (*model.AccountDeleteToken, error)
	Last() (*model.AccountDeleteToken, error)
	Find() ([]*model.AccountDeleteToken, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AccountDeleteToken, err error)
	FindInBatches(result *[]*model.AccountDeleteToken, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AccountDeleteToken) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAccountDeleteTokenDo
	Assign(attrs ...field.AssignExpr) IAccountDeleteTokenDo
	Joins(fields ...field.RelationField) IAccountDeleteTokenDo
	Preload(fields ...field.RelationField) IAccountDeleteTokenDo
	FirstOrInit() (*model.AccountDeleteToken, error)
	FirstOrCreate() (*model.AccountDeleteToken, error)
	FindByPage(offset int, limit int) (result []*model.AccountDeleteToken, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAccountDeleteTokenDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a accountDeleteTokenDo) Debug() IAccountDeleteTokenDo {
	return a.withDO(a.DO.Debug())
}

func (a accountDeleteTokenDo) WithContext(ctx context.Context) IAccountDeleteTokenDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a accountDeleteTokenDo) ReadDB() IAccountDeleteTokenDo {
	return a.Clauses(dbresolver.Read)
}

func (a accountDeleteTokenDo) WriteDB() IAccountDeleteTokenDo {
	return a.Clauses(dbresolver.Write)
}

func (a accountDeleteTokenDo) Session(config *gorm.Session) IAccountDeleteTokenDo {
	return a.withDO(a.DO.Session(config))
}

func (a accountDeleteTokenDo) Clauses(conds ...clause.Expression) IAccountDeleteTokenDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a accountDeleteTokenDo) Returning(value interface{}, columns ...string) IAccountDeleteTokenDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a accountDeleteTokenDo) Not(conds ...gen.Condition) IAccountDeleteTokenDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a accountDeleteTokenDo) Or(conds ...gen.Condition) IAccountDeleteTokenDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a accountDeleteTokenDo) Select(conds ...field.Expr) IAccountDeleteTokenDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a accountDeleteTokenDo) Where(conds ...gen.Condition) IAccountDeleteTokenDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a accountDeleteTokenDo) Order(conds ...field.Expr) IAccountDeleteTokenDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a accountDeleteTokenDo) Distinct(cols ...field.Expr) IAccountDeleteTokenDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a accountDeleteTokenDo) Omit(cols ...field.Expr) IAccountDeleteTokenDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a accountDeleteTokenDo) Join(table schema.Tabler, on ...field.Expr) IAccountDeleteTokenDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a accountDeleteTokenDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAccountDeleteTokenDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a accountDeleteTokenDo) RightJoin(table schema.Tabler, on ...field.Expr) IAccountDeleteTokenDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a accountDeleteTokenDo) Group(cols ...field.Expr) IAccountDeleteTokenDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a accountDeleteTokenDo) Having(conds ...gen.Condition) IAccountDeleteTokenDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a accountDeleteTokenDo) Limit(limit int) IAccountDeleteTokenDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a accountDeleteTokenDo) Offset(offset int) IAccountDeleteTokenDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a accountDeleteTokenDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAccountDeleteTokenDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a accountDeleteTokenDo) Unscoped() IAccountDeleteTokenDo {
	return a.withDO(a.DO.Unscoped())
}

func (a accountDeleteTokenDo) Create(values ...*model.AccountDeleteToken) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a accountDeleteTokenDo) CreateInBatches(values []*model.AccountDeleteToken, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a accountDeleteTokenDo) Save(values ...*model.AccountDeleteToken) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a accountDeleteTokenDo) First() (*model.AccountDeleteToken, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AccountDeleteToken), nil
	}
}

func (a accountDeleteTokenDo) Take() (*model.AccountDeleteToken, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AccountDeleteToken), nil
	}
}

func (a accountDeleteTokenDo) Last() (*model.AccountDeleteToken, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AccountDeleteToken), nil
	}
}

func (a accountDeleteTokenDo) Find() ([]*model.AccountDeleteToken, error) {
	result, err := a.DO.Find()
	return result.([]*model.AccountDeleteToken), err
}

func (a accountDeleteTokenDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AccountDeleteToken, err error) {
	buf := make([]*model.AccountDeleteToken, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a accountDeleteTokenDo) FindInBatches(result *[]*model.AccountDeleteToken, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a accountDeleteTokenDo) Attrs(attrs ...field.AssignExpr) IAccountDeleteTokenDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a accountDeleteTokenDo) Assign(attrs ...field.AssignExpr) IAccountDeleteTokenDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a accountDeleteTokenDo) Joins(fields ...field.RelationField) IAccountDeleteTokenDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a accountDeleteTokenDo) Preload(fields ...field.RelationField) IAccountDeleteTokenDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a accountDeleteTokenDo) FirstOrInit() (*model.AccountDeleteToken, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AccountDeleteToken), nil
	}
}

func (a accountDeleteTokenDo) FirstOrCreate() (*model.AccountDeleteToken, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AccountDeleteToken), nil
	}
}

func (a accountDeleteTokenDo) FindByPage(offset int, limit int) (result []*model.AccountDeleteToken, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a accountDeleteTokenDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a accountDeleteTokenDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a accountDeleteTokenDo) Delete(models ...*model.AccountDeleteToken) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *accountDeleteTokenDo) withDO(do gen.Dao) *accountDeleteTokenDo {
	a.DO = *do.(*gen.DO)
	return a
}
