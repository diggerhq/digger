// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models_generated

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/diggerhq/digger/next/model"
)

func newDiggerJobToken(db *gorm.DB, opts ...gen.DOOption) diggerJobToken {
	_diggerJobToken := diggerJobToken{}

	_diggerJobToken.diggerJobTokenDo.UseDB(db, opts...)
	_diggerJobToken.diggerJobTokenDo.UseModel(&model.DiggerJobToken{})

	tableName := _diggerJobToken.diggerJobTokenDo.TableName()
	_diggerJobToken.ALL = field.NewAsterisk(tableName)
	_diggerJobToken.ID = field.NewInt64(tableName, "id")
	_diggerJobToken.CreatedAt = field.NewTime(tableName, "created_at")
	_diggerJobToken.UpdatedAt = field.NewTime(tableName, "updated_at")
	_diggerJobToken.DeletedAt = field.NewField(tableName, "deleted_at")
	_diggerJobToken.Value = field.NewString(tableName, "value")
	_diggerJobToken.Expiry = field.NewTime(tableName, "expiry")
	_diggerJobToken.OrganisationID = field.NewInt64(tableName, "organisation_id")
	_diggerJobToken.Type = field.NewString(tableName, "type")

	_diggerJobToken.fillFieldMap()

	return _diggerJobToken
}

type diggerJobToken struct {
	diggerJobTokenDo

	ALL            field.Asterisk
	ID             field.Int64
	CreatedAt      field.Time
	UpdatedAt      field.Time
	DeletedAt      field.Field
	Value          field.String
	Expiry         field.Time
	OrganisationID field.Int64
	Type           field.String

	fieldMap map[string]field.Expr
}

func (d diggerJobToken) Table(newTableName string) *diggerJobToken {
	d.diggerJobTokenDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d diggerJobToken) As(alias string) *diggerJobToken {
	d.diggerJobTokenDo.DO = *(d.diggerJobTokenDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *diggerJobToken) updateTableName(table string) *diggerJobToken {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.DeletedAt = field.NewField(table, "deleted_at")
	d.Value = field.NewString(table, "value")
	d.Expiry = field.NewTime(table, "expiry")
	d.OrganisationID = field.NewInt64(table, "organisation_id")
	d.Type = field.NewString(table, "type")

	d.fillFieldMap()

	return d
}

func (d *diggerJobToken) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *diggerJobToken) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 8)
	d.fieldMap["id"] = d.ID
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["deleted_at"] = d.DeletedAt
	d.fieldMap["value"] = d.Value
	d.fieldMap["expiry"] = d.Expiry
	d.fieldMap["organisation_id"] = d.OrganisationID
	d.fieldMap["type"] = d.Type
}

func (d diggerJobToken) clone(db *gorm.DB) diggerJobToken {
	d.diggerJobTokenDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d diggerJobToken) replaceDB(db *gorm.DB) diggerJobToken {
	d.diggerJobTokenDo.ReplaceDB(db)
	return d
}

type diggerJobTokenDo struct{ gen.DO }

type IDiggerJobTokenDo interface {
	gen.SubQuery
	Debug() IDiggerJobTokenDo
	WithContext(ctx context.Context) IDiggerJobTokenDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDiggerJobTokenDo
	WriteDB() IDiggerJobTokenDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDiggerJobTokenDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDiggerJobTokenDo
	Not(conds ...gen.Condition) IDiggerJobTokenDo
	Or(conds ...gen.Condition) IDiggerJobTokenDo
	Select(conds ...field.Expr) IDiggerJobTokenDo
	Where(conds ...gen.Condition) IDiggerJobTokenDo
	Order(conds ...field.Expr) IDiggerJobTokenDo
	Distinct(cols ...field.Expr) IDiggerJobTokenDo
	Omit(cols ...field.Expr) IDiggerJobTokenDo
	Join(table schema.Tabler, on ...field.Expr) IDiggerJobTokenDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDiggerJobTokenDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDiggerJobTokenDo
	Group(cols ...field.Expr) IDiggerJobTokenDo
	Having(conds ...gen.Condition) IDiggerJobTokenDo
	Limit(limit int) IDiggerJobTokenDo
	Offset(offset int) IDiggerJobTokenDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDiggerJobTokenDo
	Unscoped() IDiggerJobTokenDo
	Create(values ...*model.DiggerJobToken) error
	CreateInBatches(values []*model.DiggerJobToken, batchSize int) error
	Save(values ...*model.DiggerJobToken) error
	First() (*model.DiggerJobToken, error)
	Take() (*model.DiggerJobToken, error)
	Last() (*model.DiggerJobToken, error)
	Find() ([]*model.DiggerJobToken, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DiggerJobToken, err error)
	FindInBatches(result *[]*model.DiggerJobToken, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DiggerJobToken) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDiggerJobTokenDo
	Assign(attrs ...field.AssignExpr) IDiggerJobTokenDo
	Joins(fields ...field.RelationField) IDiggerJobTokenDo
	Preload(fields ...field.RelationField) IDiggerJobTokenDo
	FirstOrInit() (*model.DiggerJobToken, error)
	FirstOrCreate() (*model.DiggerJobToken, error)
	FindByPage(offset int, limit int) (result []*model.DiggerJobToken, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDiggerJobTokenDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d diggerJobTokenDo) Debug() IDiggerJobTokenDo {
	return d.withDO(d.DO.Debug())
}

func (d diggerJobTokenDo) WithContext(ctx context.Context) IDiggerJobTokenDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d diggerJobTokenDo) ReadDB() IDiggerJobTokenDo {
	return d.Clauses(dbresolver.Read)
}

func (d diggerJobTokenDo) WriteDB() IDiggerJobTokenDo {
	return d.Clauses(dbresolver.Write)
}

func (d diggerJobTokenDo) Session(config *gorm.Session) IDiggerJobTokenDo {
	return d.withDO(d.DO.Session(config))
}

func (d diggerJobTokenDo) Clauses(conds ...clause.Expression) IDiggerJobTokenDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d diggerJobTokenDo) Returning(value interface{}, columns ...string) IDiggerJobTokenDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d diggerJobTokenDo) Not(conds ...gen.Condition) IDiggerJobTokenDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d diggerJobTokenDo) Or(conds ...gen.Condition) IDiggerJobTokenDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d diggerJobTokenDo) Select(conds ...field.Expr) IDiggerJobTokenDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d diggerJobTokenDo) Where(conds ...gen.Condition) IDiggerJobTokenDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d diggerJobTokenDo) Order(conds ...field.Expr) IDiggerJobTokenDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d diggerJobTokenDo) Distinct(cols ...field.Expr) IDiggerJobTokenDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d diggerJobTokenDo) Omit(cols ...field.Expr) IDiggerJobTokenDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d diggerJobTokenDo) Join(table schema.Tabler, on ...field.Expr) IDiggerJobTokenDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d diggerJobTokenDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDiggerJobTokenDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d diggerJobTokenDo) RightJoin(table schema.Tabler, on ...field.Expr) IDiggerJobTokenDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d diggerJobTokenDo) Group(cols ...field.Expr) IDiggerJobTokenDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d diggerJobTokenDo) Having(conds ...gen.Condition) IDiggerJobTokenDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d diggerJobTokenDo) Limit(limit int) IDiggerJobTokenDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d diggerJobTokenDo) Offset(offset int) IDiggerJobTokenDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d diggerJobTokenDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDiggerJobTokenDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d diggerJobTokenDo) Unscoped() IDiggerJobTokenDo {
	return d.withDO(d.DO.Unscoped())
}

func (d diggerJobTokenDo) Create(values ...*model.DiggerJobToken) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d diggerJobTokenDo) CreateInBatches(values []*model.DiggerJobToken, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d diggerJobTokenDo) Save(values ...*model.DiggerJobToken) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d diggerJobTokenDo) First() (*model.DiggerJobToken, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiggerJobToken), nil
	}
}

func (d diggerJobTokenDo) Take() (*model.DiggerJobToken, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiggerJobToken), nil
	}
}

func (d diggerJobTokenDo) Last() (*model.DiggerJobToken, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiggerJobToken), nil
	}
}

func (d diggerJobTokenDo) Find() ([]*model.DiggerJobToken, error) {
	result, err := d.DO.Find()
	return result.([]*model.DiggerJobToken), err
}

func (d diggerJobTokenDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DiggerJobToken, err error) {
	buf := make([]*model.DiggerJobToken, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d diggerJobTokenDo) FindInBatches(result *[]*model.DiggerJobToken, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d diggerJobTokenDo) Attrs(attrs ...field.AssignExpr) IDiggerJobTokenDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d diggerJobTokenDo) Assign(attrs ...field.AssignExpr) IDiggerJobTokenDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d diggerJobTokenDo) Joins(fields ...field.RelationField) IDiggerJobTokenDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d diggerJobTokenDo) Preload(fields ...field.RelationField) IDiggerJobTokenDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d diggerJobTokenDo) FirstOrInit() (*model.DiggerJobToken, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiggerJobToken), nil
	}
}

func (d diggerJobTokenDo) FirstOrCreate() (*model.DiggerJobToken, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiggerJobToken), nil
	}
}

func (d diggerJobTokenDo) FindByPage(offset int, limit int) (result []*model.DiggerJobToken, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d diggerJobTokenDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d diggerJobTokenDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d diggerJobTokenDo) Delete(models ...*model.DiggerJobToken) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *diggerJobTokenDo) withDO(do gen.Dao) *diggerJobTokenDo {
	d.DO = *do.(*gen.DO)
	return d
}
