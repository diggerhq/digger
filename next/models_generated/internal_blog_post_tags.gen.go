// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models_generated

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/diggerhq/digger/next/model"
)

func newInternalBlogPostTag(db *gorm.DB, opts ...gen.DOOption) internalBlogPostTag {
	_internalBlogPostTag := internalBlogPostTag{}

	_internalBlogPostTag.internalBlogPostTagDo.UseDB(db, opts...)
	_internalBlogPostTag.internalBlogPostTagDo.UseModel(&model.InternalBlogPostTag{})

	tableName := _internalBlogPostTag.internalBlogPostTagDo.TableName()
	_internalBlogPostTag.ALL = field.NewAsterisk(tableName)
	_internalBlogPostTag.ID = field.NewInt32(tableName, "id")
	_internalBlogPostTag.Slug = field.NewString(tableName, "slug")
	_internalBlogPostTag.Name = field.NewString(tableName, "name")
	_internalBlogPostTag.Description = field.NewString(tableName, "description")

	_internalBlogPostTag.fillFieldMap()

	return _internalBlogPostTag
}

type internalBlogPostTag struct {
	internalBlogPostTagDo

	ALL         field.Asterisk
	ID          field.Int32
	Slug        field.String
	Name        field.String
	Description field.String

	fieldMap map[string]field.Expr
}

func (i internalBlogPostTag) Table(newTableName string) *internalBlogPostTag {
	i.internalBlogPostTagDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i internalBlogPostTag) As(alias string) *internalBlogPostTag {
	i.internalBlogPostTagDo.DO = *(i.internalBlogPostTagDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *internalBlogPostTag) updateTableName(table string) *internalBlogPostTag {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewInt32(table, "id")
	i.Slug = field.NewString(table, "slug")
	i.Name = field.NewString(table, "name")
	i.Description = field.NewString(table, "description")

	i.fillFieldMap()

	return i
}

func (i *internalBlogPostTag) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *internalBlogPostTag) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 4)
	i.fieldMap["id"] = i.ID
	i.fieldMap["slug"] = i.Slug
	i.fieldMap["name"] = i.Name
	i.fieldMap["description"] = i.Description
}

func (i internalBlogPostTag) clone(db *gorm.DB) internalBlogPostTag {
	i.internalBlogPostTagDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i internalBlogPostTag) replaceDB(db *gorm.DB) internalBlogPostTag {
	i.internalBlogPostTagDo.ReplaceDB(db)
	return i
}

type internalBlogPostTagDo struct{ gen.DO }

type IInternalBlogPostTagDo interface {
	gen.SubQuery
	Debug() IInternalBlogPostTagDo
	WithContext(ctx context.Context) IInternalBlogPostTagDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IInternalBlogPostTagDo
	WriteDB() IInternalBlogPostTagDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IInternalBlogPostTagDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IInternalBlogPostTagDo
	Not(conds ...gen.Condition) IInternalBlogPostTagDo
	Or(conds ...gen.Condition) IInternalBlogPostTagDo
	Select(conds ...field.Expr) IInternalBlogPostTagDo
	Where(conds ...gen.Condition) IInternalBlogPostTagDo
	Order(conds ...field.Expr) IInternalBlogPostTagDo
	Distinct(cols ...field.Expr) IInternalBlogPostTagDo
	Omit(cols ...field.Expr) IInternalBlogPostTagDo
	Join(table schema.Tabler, on ...field.Expr) IInternalBlogPostTagDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IInternalBlogPostTagDo
	RightJoin(table schema.Tabler, on ...field.Expr) IInternalBlogPostTagDo
	Group(cols ...field.Expr) IInternalBlogPostTagDo
	Having(conds ...gen.Condition) IInternalBlogPostTagDo
	Limit(limit int) IInternalBlogPostTagDo
	Offset(offset int) IInternalBlogPostTagDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IInternalBlogPostTagDo
	Unscoped() IInternalBlogPostTagDo
	Create(values ...*model.InternalBlogPostTag) error
	CreateInBatches(values []*model.InternalBlogPostTag, batchSize int) error
	Save(values ...*model.InternalBlogPostTag) error
	First() (*model.InternalBlogPostTag, error)
	Take() (*model.InternalBlogPostTag, error)
	Last() (*model.InternalBlogPostTag, error)
	Find() ([]*model.InternalBlogPostTag, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.InternalBlogPostTag, err error)
	FindInBatches(result *[]*model.InternalBlogPostTag, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.InternalBlogPostTag) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IInternalBlogPostTagDo
	Assign(attrs ...field.AssignExpr) IInternalBlogPostTagDo
	Joins(fields ...field.RelationField) IInternalBlogPostTagDo
	Preload(fields ...field.RelationField) IInternalBlogPostTagDo
	FirstOrInit() (*model.InternalBlogPostTag, error)
	FirstOrCreate() (*model.InternalBlogPostTag, error)
	FindByPage(offset int, limit int) (result []*model.InternalBlogPostTag, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IInternalBlogPostTagDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i internalBlogPostTagDo) Debug() IInternalBlogPostTagDo {
	return i.withDO(i.DO.Debug())
}

func (i internalBlogPostTagDo) WithContext(ctx context.Context) IInternalBlogPostTagDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i internalBlogPostTagDo) ReadDB() IInternalBlogPostTagDo {
	return i.Clauses(dbresolver.Read)
}

func (i internalBlogPostTagDo) WriteDB() IInternalBlogPostTagDo {
	return i.Clauses(dbresolver.Write)
}

func (i internalBlogPostTagDo) Session(config *gorm.Session) IInternalBlogPostTagDo {
	return i.withDO(i.DO.Session(config))
}

func (i internalBlogPostTagDo) Clauses(conds ...clause.Expression) IInternalBlogPostTagDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i internalBlogPostTagDo) Returning(value interface{}, columns ...string) IInternalBlogPostTagDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i internalBlogPostTagDo) Not(conds ...gen.Condition) IInternalBlogPostTagDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i internalBlogPostTagDo) Or(conds ...gen.Condition) IInternalBlogPostTagDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i internalBlogPostTagDo) Select(conds ...field.Expr) IInternalBlogPostTagDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i internalBlogPostTagDo) Where(conds ...gen.Condition) IInternalBlogPostTagDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i internalBlogPostTagDo) Order(conds ...field.Expr) IInternalBlogPostTagDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i internalBlogPostTagDo) Distinct(cols ...field.Expr) IInternalBlogPostTagDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i internalBlogPostTagDo) Omit(cols ...field.Expr) IInternalBlogPostTagDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i internalBlogPostTagDo) Join(table schema.Tabler, on ...field.Expr) IInternalBlogPostTagDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i internalBlogPostTagDo) LeftJoin(table schema.Tabler, on ...field.Expr) IInternalBlogPostTagDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i internalBlogPostTagDo) RightJoin(table schema.Tabler, on ...field.Expr) IInternalBlogPostTagDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i internalBlogPostTagDo) Group(cols ...field.Expr) IInternalBlogPostTagDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i internalBlogPostTagDo) Having(conds ...gen.Condition) IInternalBlogPostTagDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i internalBlogPostTagDo) Limit(limit int) IInternalBlogPostTagDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i internalBlogPostTagDo) Offset(offset int) IInternalBlogPostTagDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i internalBlogPostTagDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IInternalBlogPostTagDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i internalBlogPostTagDo) Unscoped() IInternalBlogPostTagDo {
	return i.withDO(i.DO.Unscoped())
}

func (i internalBlogPostTagDo) Create(values ...*model.InternalBlogPostTag) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i internalBlogPostTagDo) CreateInBatches(values []*model.InternalBlogPostTag, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i internalBlogPostTagDo) Save(values ...*model.InternalBlogPostTag) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i internalBlogPostTagDo) First() (*model.InternalBlogPostTag, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.InternalBlogPostTag), nil
	}
}

func (i internalBlogPostTagDo) Take() (*model.InternalBlogPostTag, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.InternalBlogPostTag), nil
	}
}

func (i internalBlogPostTagDo) Last() (*model.InternalBlogPostTag, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.InternalBlogPostTag), nil
	}
}

func (i internalBlogPostTagDo) Find() ([]*model.InternalBlogPostTag, error) {
	result, err := i.DO.Find()
	return result.([]*model.InternalBlogPostTag), err
}

func (i internalBlogPostTagDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.InternalBlogPostTag, err error) {
	buf := make([]*model.InternalBlogPostTag, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i internalBlogPostTagDo) FindInBatches(result *[]*model.InternalBlogPostTag, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i internalBlogPostTagDo) Attrs(attrs ...field.AssignExpr) IInternalBlogPostTagDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i internalBlogPostTagDo) Assign(attrs ...field.AssignExpr) IInternalBlogPostTagDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i internalBlogPostTagDo) Joins(fields ...field.RelationField) IInternalBlogPostTagDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i internalBlogPostTagDo) Preload(fields ...field.RelationField) IInternalBlogPostTagDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i internalBlogPostTagDo) FirstOrInit() (*model.InternalBlogPostTag, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.InternalBlogPostTag), nil
	}
}

func (i internalBlogPostTagDo) FirstOrCreate() (*model.InternalBlogPostTag, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.InternalBlogPostTag), nil
	}
}

func (i internalBlogPostTagDo) FindByPage(offset int, limit int) (result []*model.InternalBlogPostTag, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i internalBlogPostTagDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i internalBlogPostTagDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i internalBlogPostTagDo) Delete(models ...*model.InternalBlogPostTag) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *internalBlogPostTagDo) withDO(do gen.Dao) *internalBlogPostTagDo {
	i.DO = *do.(*gen.DO)
	return i
}
