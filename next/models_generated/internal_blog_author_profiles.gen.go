// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models_generated

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/diggerhq/digger/next/model"
)

func newInternalBlogAuthorProfile(db *gorm.DB, opts ...gen.DOOption) internalBlogAuthorProfile {
	_internalBlogAuthorProfile := internalBlogAuthorProfile{}

	_internalBlogAuthorProfile.internalBlogAuthorProfileDo.UseDB(db, opts...)
	_internalBlogAuthorProfile.internalBlogAuthorProfileDo.UseModel(&model.InternalBlogAuthorProfile{})

	tableName := _internalBlogAuthorProfile.internalBlogAuthorProfileDo.TableName()
	_internalBlogAuthorProfile.ALL = field.NewAsterisk(tableName)
	_internalBlogAuthorProfile.UserID = field.NewString(tableName, "user_id")
	_internalBlogAuthorProfile.DisplayName = field.NewString(tableName, "display_name")
	_internalBlogAuthorProfile.Bio = field.NewString(tableName, "bio")
	_internalBlogAuthorProfile.AvatarURL = field.NewString(tableName, "avatar_url")
	_internalBlogAuthorProfile.WebsiteURL = field.NewString(tableName, "website_url")
	_internalBlogAuthorProfile.TwitterHandle = field.NewString(tableName, "twitter_handle")
	_internalBlogAuthorProfile.FacebookHandle = field.NewString(tableName, "facebook_handle")
	_internalBlogAuthorProfile.LinkedinHandle = field.NewString(tableName, "linkedin_handle")
	_internalBlogAuthorProfile.InstagramHandle = field.NewString(tableName, "instagram_handle")
	_internalBlogAuthorProfile.CreatedAt = field.NewTime(tableName, "created_at")
	_internalBlogAuthorProfile.UpdatedAt = field.NewTime(tableName, "updated_at")

	_internalBlogAuthorProfile.fillFieldMap()

	return _internalBlogAuthorProfile
}

type internalBlogAuthorProfile struct {
	internalBlogAuthorProfileDo

	ALL             field.Asterisk
	UserID          field.String
	DisplayName     field.String
	Bio             field.String
	AvatarURL       field.String
	WebsiteURL      field.String
	TwitterHandle   field.String
	FacebookHandle  field.String
	LinkedinHandle  field.String
	InstagramHandle field.String
	CreatedAt       field.Time
	UpdatedAt       field.Time

	fieldMap map[string]field.Expr
}

func (i internalBlogAuthorProfile) Table(newTableName string) *internalBlogAuthorProfile {
	i.internalBlogAuthorProfileDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i internalBlogAuthorProfile) As(alias string) *internalBlogAuthorProfile {
	i.internalBlogAuthorProfileDo.DO = *(i.internalBlogAuthorProfileDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *internalBlogAuthorProfile) updateTableName(table string) *internalBlogAuthorProfile {
	i.ALL = field.NewAsterisk(table)
	i.UserID = field.NewString(table, "user_id")
	i.DisplayName = field.NewString(table, "display_name")
	i.Bio = field.NewString(table, "bio")
	i.AvatarURL = field.NewString(table, "avatar_url")
	i.WebsiteURL = field.NewString(table, "website_url")
	i.TwitterHandle = field.NewString(table, "twitter_handle")
	i.FacebookHandle = field.NewString(table, "facebook_handle")
	i.LinkedinHandle = field.NewString(table, "linkedin_handle")
	i.InstagramHandle = field.NewString(table, "instagram_handle")
	i.CreatedAt = field.NewTime(table, "created_at")
	i.UpdatedAt = field.NewTime(table, "updated_at")

	i.fillFieldMap()

	return i
}

func (i *internalBlogAuthorProfile) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *internalBlogAuthorProfile) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 11)
	i.fieldMap["user_id"] = i.UserID
	i.fieldMap["display_name"] = i.DisplayName
	i.fieldMap["bio"] = i.Bio
	i.fieldMap["avatar_url"] = i.AvatarURL
	i.fieldMap["website_url"] = i.WebsiteURL
	i.fieldMap["twitter_handle"] = i.TwitterHandle
	i.fieldMap["facebook_handle"] = i.FacebookHandle
	i.fieldMap["linkedin_handle"] = i.LinkedinHandle
	i.fieldMap["instagram_handle"] = i.InstagramHandle
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["updated_at"] = i.UpdatedAt
}

func (i internalBlogAuthorProfile) clone(db *gorm.DB) internalBlogAuthorProfile {
	i.internalBlogAuthorProfileDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i internalBlogAuthorProfile) replaceDB(db *gorm.DB) internalBlogAuthorProfile {
	i.internalBlogAuthorProfileDo.ReplaceDB(db)
	return i
}

type internalBlogAuthorProfileDo struct{ gen.DO }

type IInternalBlogAuthorProfileDo interface {
	gen.SubQuery
	Debug() IInternalBlogAuthorProfileDo
	WithContext(ctx context.Context) IInternalBlogAuthorProfileDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IInternalBlogAuthorProfileDo
	WriteDB() IInternalBlogAuthorProfileDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IInternalBlogAuthorProfileDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IInternalBlogAuthorProfileDo
	Not(conds ...gen.Condition) IInternalBlogAuthorProfileDo
	Or(conds ...gen.Condition) IInternalBlogAuthorProfileDo
	Select(conds ...field.Expr) IInternalBlogAuthorProfileDo
	Where(conds ...gen.Condition) IInternalBlogAuthorProfileDo
	Order(conds ...field.Expr) IInternalBlogAuthorProfileDo
	Distinct(cols ...field.Expr) IInternalBlogAuthorProfileDo
	Omit(cols ...field.Expr) IInternalBlogAuthorProfileDo
	Join(table schema.Tabler, on ...field.Expr) IInternalBlogAuthorProfileDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IInternalBlogAuthorProfileDo
	RightJoin(table schema.Tabler, on ...field.Expr) IInternalBlogAuthorProfileDo
	Group(cols ...field.Expr) IInternalBlogAuthorProfileDo
	Having(conds ...gen.Condition) IInternalBlogAuthorProfileDo
	Limit(limit int) IInternalBlogAuthorProfileDo
	Offset(offset int) IInternalBlogAuthorProfileDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IInternalBlogAuthorProfileDo
	Unscoped() IInternalBlogAuthorProfileDo
	Create(values ...*model.InternalBlogAuthorProfile) error
	CreateInBatches(values []*model.InternalBlogAuthorProfile, batchSize int) error
	Save(values ...*model.InternalBlogAuthorProfile) error
	First() (*model.InternalBlogAuthorProfile, error)
	Take() (*model.InternalBlogAuthorProfile, error)
	Last() (*model.InternalBlogAuthorProfile, error)
	Find() ([]*model.InternalBlogAuthorProfile, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.InternalBlogAuthorProfile, err error)
	FindInBatches(result *[]*model.InternalBlogAuthorProfile, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.InternalBlogAuthorProfile) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IInternalBlogAuthorProfileDo
	Assign(attrs ...field.AssignExpr) IInternalBlogAuthorProfileDo
	Joins(fields ...field.RelationField) IInternalBlogAuthorProfileDo
	Preload(fields ...field.RelationField) IInternalBlogAuthorProfileDo
	FirstOrInit() (*model.InternalBlogAuthorProfile, error)
	FirstOrCreate() (*model.InternalBlogAuthorProfile, error)
	FindByPage(offset int, limit int) (result []*model.InternalBlogAuthorProfile, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IInternalBlogAuthorProfileDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i internalBlogAuthorProfileDo) Debug() IInternalBlogAuthorProfileDo {
	return i.withDO(i.DO.Debug())
}

func (i internalBlogAuthorProfileDo) WithContext(ctx context.Context) IInternalBlogAuthorProfileDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i internalBlogAuthorProfileDo) ReadDB() IInternalBlogAuthorProfileDo {
	return i.Clauses(dbresolver.Read)
}

func (i internalBlogAuthorProfileDo) WriteDB() IInternalBlogAuthorProfileDo {
	return i.Clauses(dbresolver.Write)
}

func (i internalBlogAuthorProfileDo) Session(config *gorm.Session) IInternalBlogAuthorProfileDo {
	return i.withDO(i.DO.Session(config))
}

func (i internalBlogAuthorProfileDo) Clauses(conds ...clause.Expression) IInternalBlogAuthorProfileDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i internalBlogAuthorProfileDo) Returning(value interface{}, columns ...string) IInternalBlogAuthorProfileDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i internalBlogAuthorProfileDo) Not(conds ...gen.Condition) IInternalBlogAuthorProfileDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i internalBlogAuthorProfileDo) Or(conds ...gen.Condition) IInternalBlogAuthorProfileDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i internalBlogAuthorProfileDo) Select(conds ...field.Expr) IInternalBlogAuthorProfileDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i internalBlogAuthorProfileDo) Where(conds ...gen.Condition) IInternalBlogAuthorProfileDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i internalBlogAuthorProfileDo) Order(conds ...field.Expr) IInternalBlogAuthorProfileDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i internalBlogAuthorProfileDo) Distinct(cols ...field.Expr) IInternalBlogAuthorProfileDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i internalBlogAuthorProfileDo) Omit(cols ...field.Expr) IInternalBlogAuthorProfileDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i internalBlogAuthorProfileDo) Join(table schema.Tabler, on ...field.Expr) IInternalBlogAuthorProfileDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i internalBlogAuthorProfileDo) LeftJoin(table schema.Tabler, on ...field.Expr) IInternalBlogAuthorProfileDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i internalBlogAuthorProfileDo) RightJoin(table schema.Tabler, on ...field.Expr) IInternalBlogAuthorProfileDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i internalBlogAuthorProfileDo) Group(cols ...field.Expr) IInternalBlogAuthorProfileDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i internalBlogAuthorProfileDo) Having(conds ...gen.Condition) IInternalBlogAuthorProfileDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i internalBlogAuthorProfileDo) Limit(limit int) IInternalBlogAuthorProfileDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i internalBlogAuthorProfileDo) Offset(offset int) IInternalBlogAuthorProfileDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i internalBlogAuthorProfileDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IInternalBlogAuthorProfileDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i internalBlogAuthorProfileDo) Unscoped() IInternalBlogAuthorProfileDo {
	return i.withDO(i.DO.Unscoped())
}

func (i internalBlogAuthorProfileDo) Create(values ...*model.InternalBlogAuthorProfile) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i internalBlogAuthorProfileDo) CreateInBatches(values []*model.InternalBlogAuthorProfile, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i internalBlogAuthorProfileDo) Save(values ...*model.InternalBlogAuthorProfile) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i internalBlogAuthorProfileDo) First() (*model.InternalBlogAuthorProfile, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.InternalBlogAuthorProfile), nil
	}
}

func (i internalBlogAuthorProfileDo) Take() (*model.InternalBlogAuthorProfile, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.InternalBlogAuthorProfile), nil
	}
}

func (i internalBlogAuthorProfileDo) Last() (*model.InternalBlogAuthorProfile, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.InternalBlogAuthorProfile), nil
	}
}

func (i internalBlogAuthorProfileDo) Find() ([]*model.InternalBlogAuthorProfile, error) {
	result, err := i.DO.Find()
	return result.([]*model.InternalBlogAuthorProfile), err
}

func (i internalBlogAuthorProfileDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.InternalBlogAuthorProfile, err error) {
	buf := make([]*model.InternalBlogAuthorProfile, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i internalBlogAuthorProfileDo) FindInBatches(result *[]*model.InternalBlogAuthorProfile, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i internalBlogAuthorProfileDo) Attrs(attrs ...field.AssignExpr) IInternalBlogAuthorProfileDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i internalBlogAuthorProfileDo) Assign(attrs ...field.AssignExpr) IInternalBlogAuthorProfileDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i internalBlogAuthorProfileDo) Joins(fields ...field.RelationField) IInternalBlogAuthorProfileDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i internalBlogAuthorProfileDo) Preload(fields ...field.RelationField) IInternalBlogAuthorProfileDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i internalBlogAuthorProfileDo) FirstOrInit() (*model.InternalBlogAuthorProfile, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.InternalBlogAuthorProfile), nil
	}
}

func (i internalBlogAuthorProfileDo) FirstOrCreate() (*model.InternalBlogAuthorProfile, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.InternalBlogAuthorProfile), nil
	}
}

func (i internalBlogAuthorProfileDo) FindByPage(offset int, limit int) (result []*model.InternalBlogAuthorProfile, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i internalBlogAuthorProfileDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i internalBlogAuthorProfileDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i internalBlogAuthorProfileDo) Delete(models ...*model.InternalBlogAuthorProfile) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *internalBlogAuthorProfileDo) withDO(do gen.Dao) *internalBlogAuthorProfileDo {
	i.DO = *do.(*gen.DO)
	return i
}
