// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models_generated

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/diggerhq/digger/next/model"
)

func newGithubAppInstallation(db *gorm.DB, opts ...gen.DOOption) githubAppInstallation {
	_githubAppInstallation := githubAppInstallation{}

	_githubAppInstallation.githubAppInstallationDo.UseDB(db, opts...)
	_githubAppInstallation.githubAppInstallationDo.UseModel(&model.GithubAppInstallation{})

	tableName := _githubAppInstallation.githubAppInstallationDo.TableName()
	_githubAppInstallation.ALL = field.NewAsterisk(tableName)
	_githubAppInstallation.ID = field.NewString(tableName, "id")
	_githubAppInstallation.CreatedAt = field.NewTime(tableName, "created_at")
	_githubAppInstallation.UpdatedAt = field.NewTime(tableName, "updated_at")
	_githubAppInstallation.DeletedAt = field.NewField(tableName, "deleted_at")
	_githubAppInstallation.GithubInstallationID = field.NewInt64(tableName, "github_installation_id")
	_githubAppInstallation.GithubAppID = field.NewInt64(tableName, "github_app_id")
	_githubAppInstallation.AccountID = field.NewInt64(tableName, "account_id")
	_githubAppInstallation.Login = field.NewString(tableName, "login")
	_githubAppInstallation.Repo = field.NewString(tableName, "repo")
	_githubAppInstallation.Status = field.NewInt64(tableName, "status")

	_githubAppInstallation.fillFieldMap()

	return _githubAppInstallation
}

type githubAppInstallation struct {
	githubAppInstallationDo

	ALL                  field.Asterisk
	ID                   field.String
	CreatedAt            field.Time
	UpdatedAt            field.Time
	DeletedAt            field.Field
	GithubInstallationID field.Int64
	GithubAppID          field.Int64
	AccountID            field.Int64
	Login                field.String
	Repo                 field.String
	Status               field.Int64

	fieldMap map[string]field.Expr
}

func (g githubAppInstallation) Table(newTableName string) *githubAppInstallation {
	g.githubAppInstallationDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g githubAppInstallation) As(alias string) *githubAppInstallation {
	g.githubAppInstallationDo.DO = *(g.githubAppInstallationDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *githubAppInstallation) updateTableName(table string) *githubAppInstallation {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewString(table, "id")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")
	g.DeletedAt = field.NewField(table, "deleted_at")
	g.GithubInstallationID = field.NewInt64(table, "github_installation_id")
	g.GithubAppID = field.NewInt64(table, "github_app_id")
	g.AccountID = field.NewInt64(table, "account_id")
	g.Login = field.NewString(table, "login")
	g.Repo = field.NewString(table, "repo")
	g.Status = field.NewInt64(table, "status")

	g.fillFieldMap()

	return g
}

func (g *githubAppInstallation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *githubAppInstallation) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 10)
	g.fieldMap["id"] = g.ID
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["deleted_at"] = g.DeletedAt
	g.fieldMap["github_installation_id"] = g.GithubInstallationID
	g.fieldMap["github_app_id"] = g.GithubAppID
	g.fieldMap["account_id"] = g.AccountID
	g.fieldMap["login"] = g.Login
	g.fieldMap["repo"] = g.Repo
	g.fieldMap["status"] = g.Status
}

func (g githubAppInstallation) clone(db *gorm.DB) githubAppInstallation {
	g.githubAppInstallationDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g githubAppInstallation) replaceDB(db *gorm.DB) githubAppInstallation {
	g.githubAppInstallationDo.ReplaceDB(db)
	return g
}

type githubAppInstallationDo struct{ gen.DO }

type IGithubAppInstallationDo interface {
	gen.SubQuery
	Debug() IGithubAppInstallationDo
	WithContext(ctx context.Context) IGithubAppInstallationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGithubAppInstallationDo
	WriteDB() IGithubAppInstallationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGithubAppInstallationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGithubAppInstallationDo
	Not(conds ...gen.Condition) IGithubAppInstallationDo
	Or(conds ...gen.Condition) IGithubAppInstallationDo
	Select(conds ...field.Expr) IGithubAppInstallationDo
	Where(conds ...gen.Condition) IGithubAppInstallationDo
	Order(conds ...field.Expr) IGithubAppInstallationDo
	Distinct(cols ...field.Expr) IGithubAppInstallationDo
	Omit(cols ...field.Expr) IGithubAppInstallationDo
	Join(table schema.Tabler, on ...field.Expr) IGithubAppInstallationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGithubAppInstallationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGithubAppInstallationDo
	Group(cols ...field.Expr) IGithubAppInstallationDo
	Having(conds ...gen.Condition) IGithubAppInstallationDo
	Limit(limit int) IGithubAppInstallationDo
	Offset(offset int) IGithubAppInstallationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGithubAppInstallationDo
	Unscoped() IGithubAppInstallationDo
	Create(values ...*model.GithubAppInstallation) error
	CreateInBatches(values []*model.GithubAppInstallation, batchSize int) error
	Save(values ...*model.GithubAppInstallation) error
	First() (*model.GithubAppInstallation, error)
	Take() (*model.GithubAppInstallation, error)
	Last() (*model.GithubAppInstallation, error)
	Find() ([]*model.GithubAppInstallation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GithubAppInstallation, err error)
	FindInBatches(result *[]*model.GithubAppInstallation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GithubAppInstallation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGithubAppInstallationDo
	Assign(attrs ...field.AssignExpr) IGithubAppInstallationDo
	Joins(fields ...field.RelationField) IGithubAppInstallationDo
	Preload(fields ...field.RelationField) IGithubAppInstallationDo
	FirstOrInit() (*model.GithubAppInstallation, error)
	FirstOrCreate() (*model.GithubAppInstallation, error)
	FindByPage(offset int, limit int) (result []*model.GithubAppInstallation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGithubAppInstallationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g githubAppInstallationDo) Debug() IGithubAppInstallationDo {
	return g.withDO(g.DO.Debug())
}

func (g githubAppInstallationDo) WithContext(ctx context.Context) IGithubAppInstallationDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g githubAppInstallationDo) ReadDB() IGithubAppInstallationDo {
	return g.Clauses(dbresolver.Read)
}

func (g githubAppInstallationDo) WriteDB() IGithubAppInstallationDo {
	return g.Clauses(dbresolver.Write)
}

func (g githubAppInstallationDo) Session(config *gorm.Session) IGithubAppInstallationDo {
	return g.withDO(g.DO.Session(config))
}

func (g githubAppInstallationDo) Clauses(conds ...clause.Expression) IGithubAppInstallationDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g githubAppInstallationDo) Returning(value interface{}, columns ...string) IGithubAppInstallationDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g githubAppInstallationDo) Not(conds ...gen.Condition) IGithubAppInstallationDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g githubAppInstallationDo) Or(conds ...gen.Condition) IGithubAppInstallationDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g githubAppInstallationDo) Select(conds ...field.Expr) IGithubAppInstallationDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g githubAppInstallationDo) Where(conds ...gen.Condition) IGithubAppInstallationDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g githubAppInstallationDo) Order(conds ...field.Expr) IGithubAppInstallationDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g githubAppInstallationDo) Distinct(cols ...field.Expr) IGithubAppInstallationDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g githubAppInstallationDo) Omit(cols ...field.Expr) IGithubAppInstallationDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g githubAppInstallationDo) Join(table schema.Tabler, on ...field.Expr) IGithubAppInstallationDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g githubAppInstallationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGithubAppInstallationDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g githubAppInstallationDo) RightJoin(table schema.Tabler, on ...field.Expr) IGithubAppInstallationDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g githubAppInstallationDo) Group(cols ...field.Expr) IGithubAppInstallationDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g githubAppInstallationDo) Having(conds ...gen.Condition) IGithubAppInstallationDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g githubAppInstallationDo) Limit(limit int) IGithubAppInstallationDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g githubAppInstallationDo) Offset(offset int) IGithubAppInstallationDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g githubAppInstallationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGithubAppInstallationDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g githubAppInstallationDo) Unscoped() IGithubAppInstallationDo {
	return g.withDO(g.DO.Unscoped())
}

func (g githubAppInstallationDo) Create(values ...*model.GithubAppInstallation) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g githubAppInstallationDo) CreateInBatches(values []*model.GithubAppInstallation, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g githubAppInstallationDo) Save(values ...*model.GithubAppInstallation) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g githubAppInstallationDo) First() (*model.GithubAppInstallation, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GithubAppInstallation), nil
	}
}

func (g githubAppInstallationDo) Take() (*model.GithubAppInstallation, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GithubAppInstallation), nil
	}
}

func (g githubAppInstallationDo) Last() (*model.GithubAppInstallation, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GithubAppInstallation), nil
	}
}

func (g githubAppInstallationDo) Find() ([]*model.GithubAppInstallation, error) {
	result, err := g.DO.Find()
	return result.([]*model.GithubAppInstallation), err
}

func (g githubAppInstallationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GithubAppInstallation, err error) {
	buf := make([]*model.GithubAppInstallation, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g githubAppInstallationDo) FindInBatches(result *[]*model.GithubAppInstallation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g githubAppInstallationDo) Attrs(attrs ...field.AssignExpr) IGithubAppInstallationDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g githubAppInstallationDo) Assign(attrs ...field.AssignExpr) IGithubAppInstallationDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g githubAppInstallationDo) Joins(fields ...field.RelationField) IGithubAppInstallationDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g githubAppInstallationDo) Preload(fields ...field.RelationField) IGithubAppInstallationDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g githubAppInstallationDo) FirstOrInit() (*model.GithubAppInstallation, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GithubAppInstallation), nil
	}
}

func (g githubAppInstallationDo) FirstOrCreate() (*model.GithubAppInstallation, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GithubAppInstallation), nil
	}
}

func (g githubAppInstallationDo) FindByPage(offset int, limit int) (result []*model.GithubAppInstallation, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g githubAppInstallationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g githubAppInstallationDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g githubAppInstallationDo) Delete(models ...*model.GithubAppInstallation) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *githubAppInstallationDo) withDO(do gen.Dao) *githubAppInstallationDo {
	g.DO = *do.(*gen.DO)
	return g
}
