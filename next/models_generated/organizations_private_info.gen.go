// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models_generated

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/diggerhq/digger/next/model"
)

func newOrganizationsPrivateInfo(db *gorm.DB, opts ...gen.DOOption) organizationsPrivateInfo {
	_organizationsPrivateInfo := organizationsPrivateInfo{}

	_organizationsPrivateInfo.organizationsPrivateInfoDo.UseDB(db, opts...)
	_organizationsPrivateInfo.organizationsPrivateInfoDo.UseModel(&model.OrganizationsPrivateInfo{})

	tableName := _organizationsPrivateInfo.organizationsPrivateInfoDo.TableName()
	_organizationsPrivateInfo.ALL = field.NewAsterisk(tableName)
	_organizationsPrivateInfo.ID = field.NewString(tableName, "id")
	_organizationsPrivateInfo.BillingAddress = field.NewString(tableName, "billing_address")
	_organizationsPrivateInfo.PaymentMethod = field.NewString(tableName, "payment_method")

	_organizationsPrivateInfo.fillFieldMap()

	return _organizationsPrivateInfo
}

type organizationsPrivateInfo struct {
	organizationsPrivateInfoDo

	ALL            field.Asterisk
	ID             field.String
	BillingAddress field.String
	PaymentMethod  field.String

	fieldMap map[string]field.Expr
}

func (o organizationsPrivateInfo) Table(newTableName string) *organizationsPrivateInfo {
	o.organizationsPrivateInfoDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o organizationsPrivateInfo) As(alias string) *organizationsPrivateInfo {
	o.organizationsPrivateInfoDo.DO = *(o.organizationsPrivateInfoDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *organizationsPrivateInfo) updateTableName(table string) *organizationsPrivateInfo {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewString(table, "id")
	o.BillingAddress = field.NewString(table, "billing_address")
	o.PaymentMethod = field.NewString(table, "payment_method")

	o.fillFieldMap()

	return o
}

func (o *organizationsPrivateInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *organizationsPrivateInfo) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 3)
	o.fieldMap["id"] = o.ID
	o.fieldMap["billing_address"] = o.BillingAddress
	o.fieldMap["payment_method"] = o.PaymentMethod
}

func (o organizationsPrivateInfo) clone(db *gorm.DB) organizationsPrivateInfo {
	o.organizationsPrivateInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o organizationsPrivateInfo) replaceDB(db *gorm.DB) organizationsPrivateInfo {
	o.organizationsPrivateInfoDo.ReplaceDB(db)
	return o
}

type organizationsPrivateInfoDo struct{ gen.DO }

type IOrganizationsPrivateInfoDo interface {
	gen.SubQuery
	Debug() IOrganizationsPrivateInfoDo
	WithContext(ctx context.Context) IOrganizationsPrivateInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOrganizationsPrivateInfoDo
	WriteDB() IOrganizationsPrivateInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOrganizationsPrivateInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOrganizationsPrivateInfoDo
	Not(conds ...gen.Condition) IOrganizationsPrivateInfoDo
	Or(conds ...gen.Condition) IOrganizationsPrivateInfoDo
	Select(conds ...field.Expr) IOrganizationsPrivateInfoDo
	Where(conds ...gen.Condition) IOrganizationsPrivateInfoDo
	Order(conds ...field.Expr) IOrganizationsPrivateInfoDo
	Distinct(cols ...field.Expr) IOrganizationsPrivateInfoDo
	Omit(cols ...field.Expr) IOrganizationsPrivateInfoDo
	Join(table schema.Tabler, on ...field.Expr) IOrganizationsPrivateInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOrganizationsPrivateInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOrganizationsPrivateInfoDo
	Group(cols ...field.Expr) IOrganizationsPrivateInfoDo
	Having(conds ...gen.Condition) IOrganizationsPrivateInfoDo
	Limit(limit int) IOrganizationsPrivateInfoDo
	Offset(offset int) IOrganizationsPrivateInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOrganizationsPrivateInfoDo
	Unscoped() IOrganizationsPrivateInfoDo
	Create(values ...*model.OrganizationsPrivateInfo) error
	CreateInBatches(values []*model.OrganizationsPrivateInfo, batchSize int) error
	Save(values ...*model.OrganizationsPrivateInfo) error
	First() (*model.OrganizationsPrivateInfo, error)
	Take() (*model.OrganizationsPrivateInfo, error)
	Last() (*model.OrganizationsPrivateInfo, error)
	Find() ([]*model.OrganizationsPrivateInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrganizationsPrivateInfo, err error)
	FindInBatches(result *[]*model.OrganizationsPrivateInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OrganizationsPrivateInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOrganizationsPrivateInfoDo
	Assign(attrs ...field.AssignExpr) IOrganizationsPrivateInfoDo
	Joins(fields ...field.RelationField) IOrganizationsPrivateInfoDo
	Preload(fields ...field.RelationField) IOrganizationsPrivateInfoDo
	FirstOrInit() (*model.OrganizationsPrivateInfo, error)
	FirstOrCreate() (*model.OrganizationsPrivateInfo, error)
	FindByPage(offset int, limit int) (result []*model.OrganizationsPrivateInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOrganizationsPrivateInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o organizationsPrivateInfoDo) Debug() IOrganizationsPrivateInfoDo {
	return o.withDO(o.DO.Debug())
}

func (o organizationsPrivateInfoDo) WithContext(ctx context.Context) IOrganizationsPrivateInfoDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o organizationsPrivateInfoDo) ReadDB() IOrganizationsPrivateInfoDo {
	return o.Clauses(dbresolver.Read)
}

func (o organizationsPrivateInfoDo) WriteDB() IOrganizationsPrivateInfoDo {
	return o.Clauses(dbresolver.Write)
}

func (o organizationsPrivateInfoDo) Session(config *gorm.Session) IOrganizationsPrivateInfoDo {
	return o.withDO(o.DO.Session(config))
}

func (o organizationsPrivateInfoDo) Clauses(conds ...clause.Expression) IOrganizationsPrivateInfoDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o organizationsPrivateInfoDo) Returning(value interface{}, columns ...string) IOrganizationsPrivateInfoDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o organizationsPrivateInfoDo) Not(conds ...gen.Condition) IOrganizationsPrivateInfoDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o organizationsPrivateInfoDo) Or(conds ...gen.Condition) IOrganizationsPrivateInfoDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o organizationsPrivateInfoDo) Select(conds ...field.Expr) IOrganizationsPrivateInfoDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o organizationsPrivateInfoDo) Where(conds ...gen.Condition) IOrganizationsPrivateInfoDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o organizationsPrivateInfoDo) Order(conds ...field.Expr) IOrganizationsPrivateInfoDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o organizationsPrivateInfoDo) Distinct(cols ...field.Expr) IOrganizationsPrivateInfoDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o organizationsPrivateInfoDo) Omit(cols ...field.Expr) IOrganizationsPrivateInfoDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o organizationsPrivateInfoDo) Join(table schema.Tabler, on ...field.Expr) IOrganizationsPrivateInfoDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o organizationsPrivateInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOrganizationsPrivateInfoDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o organizationsPrivateInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IOrganizationsPrivateInfoDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o organizationsPrivateInfoDo) Group(cols ...field.Expr) IOrganizationsPrivateInfoDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o organizationsPrivateInfoDo) Having(conds ...gen.Condition) IOrganizationsPrivateInfoDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o organizationsPrivateInfoDo) Limit(limit int) IOrganizationsPrivateInfoDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o organizationsPrivateInfoDo) Offset(offset int) IOrganizationsPrivateInfoDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o organizationsPrivateInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOrganizationsPrivateInfoDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o organizationsPrivateInfoDo) Unscoped() IOrganizationsPrivateInfoDo {
	return o.withDO(o.DO.Unscoped())
}

func (o organizationsPrivateInfoDo) Create(values ...*model.OrganizationsPrivateInfo) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o organizationsPrivateInfoDo) CreateInBatches(values []*model.OrganizationsPrivateInfo, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o organizationsPrivateInfoDo) Save(values ...*model.OrganizationsPrivateInfo) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o organizationsPrivateInfoDo) First() (*model.OrganizationsPrivateInfo, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrganizationsPrivateInfo), nil
	}
}

func (o organizationsPrivateInfoDo) Take() (*model.OrganizationsPrivateInfo, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrganizationsPrivateInfo), nil
	}
}

func (o organizationsPrivateInfoDo) Last() (*model.OrganizationsPrivateInfo, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrganizationsPrivateInfo), nil
	}
}

func (o organizationsPrivateInfoDo) Find() ([]*model.OrganizationsPrivateInfo, error) {
	result, err := o.DO.Find()
	return result.([]*model.OrganizationsPrivateInfo), err
}

func (o organizationsPrivateInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrganizationsPrivateInfo, err error) {
	buf := make([]*model.OrganizationsPrivateInfo, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o organizationsPrivateInfoDo) FindInBatches(result *[]*model.OrganizationsPrivateInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o organizationsPrivateInfoDo) Attrs(attrs ...field.AssignExpr) IOrganizationsPrivateInfoDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o organizationsPrivateInfoDo) Assign(attrs ...field.AssignExpr) IOrganizationsPrivateInfoDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o organizationsPrivateInfoDo) Joins(fields ...field.RelationField) IOrganizationsPrivateInfoDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o organizationsPrivateInfoDo) Preload(fields ...field.RelationField) IOrganizationsPrivateInfoDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o organizationsPrivateInfoDo) FirstOrInit() (*model.OrganizationsPrivateInfo, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrganizationsPrivateInfo), nil
	}
}

func (o organizationsPrivateInfoDo) FirstOrCreate() (*model.OrganizationsPrivateInfo, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrganizationsPrivateInfo), nil
	}
}

func (o organizationsPrivateInfoDo) FindByPage(offset int, limit int) (result []*model.OrganizationsPrivateInfo, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o organizationsPrivateInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o organizationsPrivateInfoDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o organizationsPrivateInfoDo) Delete(models ...*model.OrganizationsPrivateInfo) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *organizationsPrivateInfoDo) withDO(do gen.Dao) *organizationsPrivateInfoDo {
	o.DO = *do.(*gen.DO)
	return o
}
