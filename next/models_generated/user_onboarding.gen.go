// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models_generated

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/diggerhq/digger/next/model"
)

func newUserOnboarding(db *gorm.DB, opts ...gen.DOOption) userOnboarding {
	_userOnboarding := userOnboarding{}

	_userOnboarding.userOnboardingDo.UseDB(db, opts...)
	_userOnboarding.userOnboardingDo.UseModel(&model.UserOnboarding{})

	tableName := _userOnboarding.userOnboardingDo.TableName()
	_userOnboarding.ALL = field.NewAsterisk(tableName)
	_userOnboarding.UserID = field.NewString(tableName, "user_id")
	_userOnboarding.CreatedAt = field.NewTime(tableName, "created_at")
	_userOnboarding.AcceptedTerms = field.NewBool(tableName, "accepted_terms")

	_userOnboarding.fillFieldMap()

	return _userOnboarding
}

type userOnboarding struct {
	userOnboardingDo

	ALL           field.Asterisk
	UserID        field.String
	CreatedAt     field.Time
	AcceptedTerms field.Bool

	fieldMap map[string]field.Expr
}

func (u userOnboarding) Table(newTableName string) *userOnboarding {
	u.userOnboardingDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userOnboarding) As(alias string) *userOnboarding {
	u.userOnboardingDo.DO = *(u.userOnboardingDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userOnboarding) updateTableName(table string) *userOnboarding {
	u.ALL = field.NewAsterisk(table)
	u.UserID = field.NewString(table, "user_id")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.AcceptedTerms = field.NewBool(table, "accepted_terms")

	u.fillFieldMap()

	return u
}

func (u *userOnboarding) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userOnboarding) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 3)
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["accepted_terms"] = u.AcceptedTerms
}

func (u userOnboarding) clone(db *gorm.DB) userOnboarding {
	u.userOnboardingDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userOnboarding) replaceDB(db *gorm.DB) userOnboarding {
	u.userOnboardingDo.ReplaceDB(db)
	return u
}

type userOnboardingDo struct{ gen.DO }

type IUserOnboardingDo interface {
	gen.SubQuery
	Debug() IUserOnboardingDo
	WithContext(ctx context.Context) IUserOnboardingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserOnboardingDo
	WriteDB() IUserOnboardingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserOnboardingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserOnboardingDo
	Not(conds ...gen.Condition) IUserOnboardingDo
	Or(conds ...gen.Condition) IUserOnboardingDo
	Select(conds ...field.Expr) IUserOnboardingDo
	Where(conds ...gen.Condition) IUserOnboardingDo
	Order(conds ...field.Expr) IUserOnboardingDo
	Distinct(cols ...field.Expr) IUserOnboardingDo
	Omit(cols ...field.Expr) IUserOnboardingDo
	Join(table schema.Tabler, on ...field.Expr) IUserOnboardingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserOnboardingDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserOnboardingDo
	Group(cols ...field.Expr) IUserOnboardingDo
	Having(conds ...gen.Condition) IUserOnboardingDo
	Limit(limit int) IUserOnboardingDo
	Offset(offset int) IUserOnboardingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserOnboardingDo
	Unscoped() IUserOnboardingDo
	Create(values ...*model.UserOnboarding) error
	CreateInBatches(values []*model.UserOnboarding, batchSize int) error
	Save(values ...*model.UserOnboarding) error
	First() (*model.UserOnboarding, error)
	Take() (*model.UserOnboarding, error)
	Last() (*model.UserOnboarding, error)
	Find() ([]*model.UserOnboarding, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserOnboarding, err error)
	FindInBatches(result *[]*model.UserOnboarding, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserOnboarding) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserOnboardingDo
	Assign(attrs ...field.AssignExpr) IUserOnboardingDo
	Joins(fields ...field.RelationField) IUserOnboardingDo
	Preload(fields ...field.RelationField) IUserOnboardingDo
	FirstOrInit() (*model.UserOnboarding, error)
	FirstOrCreate() (*model.UserOnboarding, error)
	FindByPage(offset int, limit int) (result []*model.UserOnboarding, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserOnboardingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userOnboardingDo) Debug() IUserOnboardingDo {
	return u.withDO(u.DO.Debug())
}

func (u userOnboardingDo) WithContext(ctx context.Context) IUserOnboardingDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userOnboardingDo) ReadDB() IUserOnboardingDo {
	return u.Clauses(dbresolver.Read)
}

func (u userOnboardingDo) WriteDB() IUserOnboardingDo {
	return u.Clauses(dbresolver.Write)
}

func (u userOnboardingDo) Session(config *gorm.Session) IUserOnboardingDo {
	return u.withDO(u.DO.Session(config))
}

func (u userOnboardingDo) Clauses(conds ...clause.Expression) IUserOnboardingDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userOnboardingDo) Returning(value interface{}, columns ...string) IUserOnboardingDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userOnboardingDo) Not(conds ...gen.Condition) IUserOnboardingDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userOnboardingDo) Or(conds ...gen.Condition) IUserOnboardingDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userOnboardingDo) Select(conds ...field.Expr) IUserOnboardingDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userOnboardingDo) Where(conds ...gen.Condition) IUserOnboardingDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userOnboardingDo) Order(conds ...field.Expr) IUserOnboardingDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userOnboardingDo) Distinct(cols ...field.Expr) IUserOnboardingDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userOnboardingDo) Omit(cols ...field.Expr) IUserOnboardingDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userOnboardingDo) Join(table schema.Tabler, on ...field.Expr) IUserOnboardingDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userOnboardingDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserOnboardingDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userOnboardingDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserOnboardingDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userOnboardingDo) Group(cols ...field.Expr) IUserOnboardingDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userOnboardingDo) Having(conds ...gen.Condition) IUserOnboardingDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userOnboardingDo) Limit(limit int) IUserOnboardingDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userOnboardingDo) Offset(offset int) IUserOnboardingDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userOnboardingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserOnboardingDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userOnboardingDo) Unscoped() IUserOnboardingDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userOnboardingDo) Create(values ...*model.UserOnboarding) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userOnboardingDo) CreateInBatches(values []*model.UserOnboarding, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userOnboardingDo) Save(values ...*model.UserOnboarding) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userOnboardingDo) First() (*model.UserOnboarding, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserOnboarding), nil
	}
}

func (u userOnboardingDo) Take() (*model.UserOnboarding, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserOnboarding), nil
	}
}

func (u userOnboardingDo) Last() (*model.UserOnboarding, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserOnboarding), nil
	}
}

func (u userOnboardingDo) Find() ([]*model.UserOnboarding, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserOnboarding), err
}

func (u userOnboardingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserOnboarding, err error) {
	buf := make([]*model.UserOnboarding, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userOnboardingDo) FindInBatches(result *[]*model.UserOnboarding, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userOnboardingDo) Attrs(attrs ...field.AssignExpr) IUserOnboardingDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userOnboardingDo) Assign(attrs ...field.AssignExpr) IUserOnboardingDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userOnboardingDo) Joins(fields ...field.RelationField) IUserOnboardingDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userOnboardingDo) Preload(fields ...field.RelationField) IUserOnboardingDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userOnboardingDo) FirstOrInit() (*model.UserOnboarding, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserOnboarding), nil
	}
}

func (u userOnboardingDo) FirstOrCreate() (*model.UserOnboarding, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserOnboarding), nil
	}
}

func (u userOnboardingDo) FindByPage(offset int, limit int) (result []*model.UserOnboarding, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userOnboardingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userOnboardingDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userOnboardingDo) Delete(models ...*model.UserOnboarding) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userOnboardingDo) withDO(do gen.Dao) *userOnboardingDo {
	u.DO = *do.(*gen.DO)
	return u
}
