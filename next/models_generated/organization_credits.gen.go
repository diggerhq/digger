// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models_generated

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/diggerhq/digger/next/model"
)

func newOrganizationCredit(db *gorm.DB, opts ...gen.DOOption) organizationCredit {
	_organizationCredit := organizationCredit{}

	_organizationCredit.organizationCreditDo.UseDB(db, opts...)
	_organizationCredit.organizationCreditDo.UseModel(&model.OrganizationCredit{})

	tableName := _organizationCredit.organizationCreditDo.TableName()
	_organizationCredit.ALL = field.NewAsterisk(tableName)
	_organizationCredit.OrganizationID = field.NewString(tableName, "organization_id")
	_organizationCredit.Credits = field.NewInt64(tableName, "credits")

	_organizationCredit.fillFieldMap()

	return _organizationCredit
}

type organizationCredit struct {
	organizationCreditDo

	ALL            field.Asterisk
	OrganizationID field.String
	Credits        field.Int64

	fieldMap map[string]field.Expr
}

func (o organizationCredit) Table(newTableName string) *organizationCredit {
	o.organizationCreditDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o organizationCredit) As(alias string) *organizationCredit {
	o.organizationCreditDo.DO = *(o.organizationCreditDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *organizationCredit) updateTableName(table string) *organizationCredit {
	o.ALL = field.NewAsterisk(table)
	o.OrganizationID = field.NewString(table, "organization_id")
	o.Credits = field.NewInt64(table, "credits")

	o.fillFieldMap()

	return o
}

func (o *organizationCredit) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *organizationCredit) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 2)
	o.fieldMap["organization_id"] = o.OrganizationID
	o.fieldMap["credits"] = o.Credits
}

func (o organizationCredit) clone(db *gorm.DB) organizationCredit {
	o.organizationCreditDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o organizationCredit) replaceDB(db *gorm.DB) organizationCredit {
	o.organizationCreditDo.ReplaceDB(db)
	return o
}

type organizationCreditDo struct{ gen.DO }

type IOrganizationCreditDo interface {
	gen.SubQuery
	Debug() IOrganizationCreditDo
	WithContext(ctx context.Context) IOrganizationCreditDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOrganizationCreditDo
	WriteDB() IOrganizationCreditDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOrganizationCreditDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOrganizationCreditDo
	Not(conds ...gen.Condition) IOrganizationCreditDo
	Or(conds ...gen.Condition) IOrganizationCreditDo
	Select(conds ...field.Expr) IOrganizationCreditDo
	Where(conds ...gen.Condition) IOrganizationCreditDo
	Order(conds ...field.Expr) IOrganizationCreditDo
	Distinct(cols ...field.Expr) IOrganizationCreditDo
	Omit(cols ...field.Expr) IOrganizationCreditDo
	Join(table schema.Tabler, on ...field.Expr) IOrganizationCreditDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOrganizationCreditDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOrganizationCreditDo
	Group(cols ...field.Expr) IOrganizationCreditDo
	Having(conds ...gen.Condition) IOrganizationCreditDo
	Limit(limit int) IOrganizationCreditDo
	Offset(offset int) IOrganizationCreditDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOrganizationCreditDo
	Unscoped() IOrganizationCreditDo
	Create(values ...*model.OrganizationCredit) error
	CreateInBatches(values []*model.OrganizationCredit, batchSize int) error
	Save(values ...*model.OrganizationCredit) error
	First() (*model.OrganizationCredit, error)
	Take() (*model.OrganizationCredit, error)
	Last() (*model.OrganizationCredit, error)
	Find() ([]*model.OrganizationCredit, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrganizationCredit, err error)
	FindInBatches(result *[]*model.OrganizationCredit, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OrganizationCredit) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOrganizationCreditDo
	Assign(attrs ...field.AssignExpr) IOrganizationCreditDo
	Joins(fields ...field.RelationField) IOrganizationCreditDo
	Preload(fields ...field.RelationField) IOrganizationCreditDo
	FirstOrInit() (*model.OrganizationCredit, error)
	FirstOrCreate() (*model.OrganizationCredit, error)
	FindByPage(offset int, limit int) (result []*model.OrganizationCredit, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOrganizationCreditDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o organizationCreditDo) Debug() IOrganizationCreditDo {
	return o.withDO(o.DO.Debug())
}

func (o organizationCreditDo) WithContext(ctx context.Context) IOrganizationCreditDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o organizationCreditDo) ReadDB() IOrganizationCreditDo {
	return o.Clauses(dbresolver.Read)
}

func (o organizationCreditDo) WriteDB() IOrganizationCreditDo {
	return o.Clauses(dbresolver.Write)
}

func (o organizationCreditDo) Session(config *gorm.Session) IOrganizationCreditDo {
	return o.withDO(o.DO.Session(config))
}

func (o organizationCreditDo) Clauses(conds ...clause.Expression) IOrganizationCreditDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o organizationCreditDo) Returning(value interface{}, columns ...string) IOrganizationCreditDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o organizationCreditDo) Not(conds ...gen.Condition) IOrganizationCreditDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o organizationCreditDo) Or(conds ...gen.Condition) IOrganizationCreditDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o organizationCreditDo) Select(conds ...field.Expr) IOrganizationCreditDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o organizationCreditDo) Where(conds ...gen.Condition) IOrganizationCreditDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o organizationCreditDo) Order(conds ...field.Expr) IOrganizationCreditDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o organizationCreditDo) Distinct(cols ...field.Expr) IOrganizationCreditDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o organizationCreditDo) Omit(cols ...field.Expr) IOrganizationCreditDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o organizationCreditDo) Join(table schema.Tabler, on ...field.Expr) IOrganizationCreditDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o organizationCreditDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOrganizationCreditDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o organizationCreditDo) RightJoin(table schema.Tabler, on ...field.Expr) IOrganizationCreditDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o organizationCreditDo) Group(cols ...field.Expr) IOrganizationCreditDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o organizationCreditDo) Having(conds ...gen.Condition) IOrganizationCreditDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o organizationCreditDo) Limit(limit int) IOrganizationCreditDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o organizationCreditDo) Offset(offset int) IOrganizationCreditDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o organizationCreditDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOrganizationCreditDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o organizationCreditDo) Unscoped() IOrganizationCreditDo {
	return o.withDO(o.DO.Unscoped())
}

func (o organizationCreditDo) Create(values ...*model.OrganizationCredit) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o organizationCreditDo) CreateInBatches(values []*model.OrganizationCredit, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o organizationCreditDo) Save(values ...*model.OrganizationCredit) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o organizationCreditDo) First() (*model.OrganizationCredit, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrganizationCredit), nil
	}
}

func (o organizationCreditDo) Take() (*model.OrganizationCredit, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrganizationCredit), nil
	}
}

func (o organizationCreditDo) Last() (*model.OrganizationCredit, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrganizationCredit), nil
	}
}

func (o organizationCreditDo) Find() ([]*model.OrganizationCredit, error) {
	result, err := o.DO.Find()
	return result.([]*model.OrganizationCredit), err
}

func (o organizationCreditDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrganizationCredit, err error) {
	buf := make([]*model.OrganizationCredit, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o organizationCreditDo) FindInBatches(result *[]*model.OrganizationCredit, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o organizationCreditDo) Attrs(attrs ...field.AssignExpr) IOrganizationCreditDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o organizationCreditDo) Assign(attrs ...field.AssignExpr) IOrganizationCreditDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o organizationCreditDo) Joins(fields ...field.RelationField) IOrganizationCreditDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o organizationCreditDo) Preload(fields ...field.RelationField) IOrganizationCreditDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o organizationCreditDo) FirstOrInit() (*model.OrganizationCredit, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrganizationCredit), nil
	}
}

func (o organizationCreditDo) FirstOrCreate() (*model.OrganizationCredit, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrganizationCredit), nil
	}
}

func (o organizationCreditDo) FindByPage(offset int, limit int) (result []*model.OrganizationCredit, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o organizationCreditDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o organizationCreditDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o organizationCreditDo) Delete(models ...*model.OrganizationCredit) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *organizationCreditDo) withDO(do gen.Dao) *organizationCreditDo {
	o.DO = *do.(*gen.DO)
	return o
}
