// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models_generated

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/diggerhq/digger/next/model"
)

func newInternalFeedbackComment(db *gorm.DB, opts ...gen.DOOption) internalFeedbackComment {
	_internalFeedbackComment := internalFeedbackComment{}

	_internalFeedbackComment.internalFeedbackCommentDo.UseDB(db, opts...)
	_internalFeedbackComment.internalFeedbackCommentDo.UseModel(&model.InternalFeedbackComment{})

	tableName := _internalFeedbackComment.internalFeedbackCommentDo.TableName()
	_internalFeedbackComment.ALL = field.NewAsterisk(tableName)
	_internalFeedbackComment.ID = field.NewString(tableName, "id")
	_internalFeedbackComment.UserID = field.NewString(tableName, "user_id")
	_internalFeedbackComment.ThreadID = field.NewString(tableName, "thread_id")
	_internalFeedbackComment.Content = field.NewString(tableName, "content")
	_internalFeedbackComment.CreatedAt = field.NewTime(tableName, "created_at")
	_internalFeedbackComment.UpdatedAt = field.NewTime(tableName, "updated_at")

	_internalFeedbackComment.fillFieldMap()

	return _internalFeedbackComment
}

type internalFeedbackComment struct {
	internalFeedbackCommentDo

	ALL       field.Asterisk
	ID        field.String
	UserID    field.String
	ThreadID  field.String
	Content   field.String
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (i internalFeedbackComment) Table(newTableName string) *internalFeedbackComment {
	i.internalFeedbackCommentDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i internalFeedbackComment) As(alias string) *internalFeedbackComment {
	i.internalFeedbackCommentDo.DO = *(i.internalFeedbackCommentDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *internalFeedbackComment) updateTableName(table string) *internalFeedbackComment {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewString(table, "id")
	i.UserID = field.NewString(table, "user_id")
	i.ThreadID = field.NewString(table, "thread_id")
	i.Content = field.NewString(table, "content")
	i.CreatedAt = field.NewTime(table, "created_at")
	i.UpdatedAt = field.NewTime(table, "updated_at")

	i.fillFieldMap()

	return i
}

func (i *internalFeedbackComment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *internalFeedbackComment) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 6)
	i.fieldMap["id"] = i.ID
	i.fieldMap["user_id"] = i.UserID
	i.fieldMap["thread_id"] = i.ThreadID
	i.fieldMap["content"] = i.Content
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["updated_at"] = i.UpdatedAt
}

func (i internalFeedbackComment) clone(db *gorm.DB) internalFeedbackComment {
	i.internalFeedbackCommentDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i internalFeedbackComment) replaceDB(db *gorm.DB) internalFeedbackComment {
	i.internalFeedbackCommentDo.ReplaceDB(db)
	return i
}

type internalFeedbackCommentDo struct{ gen.DO }

type IInternalFeedbackCommentDo interface {
	gen.SubQuery
	Debug() IInternalFeedbackCommentDo
	WithContext(ctx context.Context) IInternalFeedbackCommentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IInternalFeedbackCommentDo
	WriteDB() IInternalFeedbackCommentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IInternalFeedbackCommentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IInternalFeedbackCommentDo
	Not(conds ...gen.Condition) IInternalFeedbackCommentDo
	Or(conds ...gen.Condition) IInternalFeedbackCommentDo
	Select(conds ...field.Expr) IInternalFeedbackCommentDo
	Where(conds ...gen.Condition) IInternalFeedbackCommentDo
	Order(conds ...field.Expr) IInternalFeedbackCommentDo
	Distinct(cols ...field.Expr) IInternalFeedbackCommentDo
	Omit(cols ...field.Expr) IInternalFeedbackCommentDo
	Join(table schema.Tabler, on ...field.Expr) IInternalFeedbackCommentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IInternalFeedbackCommentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IInternalFeedbackCommentDo
	Group(cols ...field.Expr) IInternalFeedbackCommentDo
	Having(conds ...gen.Condition) IInternalFeedbackCommentDo
	Limit(limit int) IInternalFeedbackCommentDo
	Offset(offset int) IInternalFeedbackCommentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IInternalFeedbackCommentDo
	Unscoped() IInternalFeedbackCommentDo
	Create(values ...*model.InternalFeedbackComment) error
	CreateInBatches(values []*model.InternalFeedbackComment, batchSize int) error
	Save(values ...*model.InternalFeedbackComment) error
	First() (*model.InternalFeedbackComment, error)
	Take() (*model.InternalFeedbackComment, error)
	Last() (*model.InternalFeedbackComment, error)
	Find() ([]*model.InternalFeedbackComment, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.InternalFeedbackComment, err error)
	FindInBatches(result *[]*model.InternalFeedbackComment, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.InternalFeedbackComment) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IInternalFeedbackCommentDo
	Assign(attrs ...field.AssignExpr) IInternalFeedbackCommentDo
	Joins(fields ...field.RelationField) IInternalFeedbackCommentDo
	Preload(fields ...field.RelationField) IInternalFeedbackCommentDo
	FirstOrInit() (*model.InternalFeedbackComment, error)
	FirstOrCreate() (*model.InternalFeedbackComment, error)
	FindByPage(offset int, limit int) (result []*model.InternalFeedbackComment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IInternalFeedbackCommentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i internalFeedbackCommentDo) Debug() IInternalFeedbackCommentDo {
	return i.withDO(i.DO.Debug())
}

func (i internalFeedbackCommentDo) WithContext(ctx context.Context) IInternalFeedbackCommentDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i internalFeedbackCommentDo) ReadDB() IInternalFeedbackCommentDo {
	return i.Clauses(dbresolver.Read)
}

func (i internalFeedbackCommentDo) WriteDB() IInternalFeedbackCommentDo {
	return i.Clauses(dbresolver.Write)
}

func (i internalFeedbackCommentDo) Session(config *gorm.Session) IInternalFeedbackCommentDo {
	return i.withDO(i.DO.Session(config))
}

func (i internalFeedbackCommentDo) Clauses(conds ...clause.Expression) IInternalFeedbackCommentDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i internalFeedbackCommentDo) Returning(value interface{}, columns ...string) IInternalFeedbackCommentDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i internalFeedbackCommentDo) Not(conds ...gen.Condition) IInternalFeedbackCommentDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i internalFeedbackCommentDo) Or(conds ...gen.Condition) IInternalFeedbackCommentDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i internalFeedbackCommentDo) Select(conds ...field.Expr) IInternalFeedbackCommentDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i internalFeedbackCommentDo) Where(conds ...gen.Condition) IInternalFeedbackCommentDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i internalFeedbackCommentDo) Order(conds ...field.Expr) IInternalFeedbackCommentDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i internalFeedbackCommentDo) Distinct(cols ...field.Expr) IInternalFeedbackCommentDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i internalFeedbackCommentDo) Omit(cols ...field.Expr) IInternalFeedbackCommentDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i internalFeedbackCommentDo) Join(table schema.Tabler, on ...field.Expr) IInternalFeedbackCommentDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i internalFeedbackCommentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IInternalFeedbackCommentDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i internalFeedbackCommentDo) RightJoin(table schema.Tabler, on ...field.Expr) IInternalFeedbackCommentDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i internalFeedbackCommentDo) Group(cols ...field.Expr) IInternalFeedbackCommentDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i internalFeedbackCommentDo) Having(conds ...gen.Condition) IInternalFeedbackCommentDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i internalFeedbackCommentDo) Limit(limit int) IInternalFeedbackCommentDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i internalFeedbackCommentDo) Offset(offset int) IInternalFeedbackCommentDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i internalFeedbackCommentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IInternalFeedbackCommentDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i internalFeedbackCommentDo) Unscoped() IInternalFeedbackCommentDo {
	return i.withDO(i.DO.Unscoped())
}

func (i internalFeedbackCommentDo) Create(values ...*model.InternalFeedbackComment) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i internalFeedbackCommentDo) CreateInBatches(values []*model.InternalFeedbackComment, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i internalFeedbackCommentDo) Save(values ...*model.InternalFeedbackComment) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i internalFeedbackCommentDo) First() (*model.InternalFeedbackComment, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.InternalFeedbackComment), nil
	}
}

func (i internalFeedbackCommentDo) Take() (*model.InternalFeedbackComment, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.InternalFeedbackComment), nil
	}
}

func (i internalFeedbackCommentDo) Last() (*model.InternalFeedbackComment, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.InternalFeedbackComment), nil
	}
}

func (i internalFeedbackCommentDo) Find() ([]*model.InternalFeedbackComment, error) {
	result, err := i.DO.Find()
	return result.([]*model.InternalFeedbackComment), err
}

func (i internalFeedbackCommentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.InternalFeedbackComment, err error) {
	buf := make([]*model.InternalFeedbackComment, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i internalFeedbackCommentDo) FindInBatches(result *[]*model.InternalFeedbackComment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i internalFeedbackCommentDo) Attrs(attrs ...field.AssignExpr) IInternalFeedbackCommentDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i internalFeedbackCommentDo) Assign(attrs ...field.AssignExpr) IInternalFeedbackCommentDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i internalFeedbackCommentDo) Joins(fields ...field.RelationField) IInternalFeedbackCommentDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i internalFeedbackCommentDo) Preload(fields ...field.RelationField) IInternalFeedbackCommentDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i internalFeedbackCommentDo) FirstOrInit() (*model.InternalFeedbackComment, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.InternalFeedbackComment), nil
	}
}

func (i internalFeedbackCommentDo) FirstOrCreate() (*model.InternalFeedbackComment, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.InternalFeedbackComment), nil
	}
}

func (i internalFeedbackCommentDo) FindByPage(offset int, limit int) (result []*model.InternalFeedbackComment, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i internalFeedbackCommentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i internalFeedbackCommentDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i internalFeedbackCommentDo) Delete(models ...*model.InternalFeedbackComment) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *internalFeedbackCommentDo) withDO(do gen.Dao) *internalFeedbackCommentDo {
	i.DO = *do.(*gen.DO)
	return i
}
