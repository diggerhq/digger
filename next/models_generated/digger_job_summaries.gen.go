// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models_generated

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/diggerhq/digger/next/model"
)

func newDiggerJobSummary(db *gorm.DB, opts ...gen.DOOption) diggerJobSummary {
	_diggerJobSummary := diggerJobSummary{}

	_diggerJobSummary.diggerJobSummaryDo.UseDB(db, opts...)
	_diggerJobSummary.diggerJobSummaryDo.UseModel(&model.DiggerJobSummary{})

	tableName := _diggerJobSummary.diggerJobSummaryDo.TableName()
	_diggerJobSummary.ALL = field.NewAsterisk(tableName)
	_diggerJobSummary.ID = field.NewString(tableName, "id")
	_diggerJobSummary.CreatedAt = field.NewTime(tableName, "created_at")
	_diggerJobSummary.UpdatedAt = field.NewTime(tableName, "updated_at")
	_diggerJobSummary.DeletedAt = field.NewField(tableName, "deleted_at")
	_diggerJobSummary.ResourcesCreated = field.NewInt64(tableName, "resources_created")
	_diggerJobSummary.ResourcesDeleted = field.NewInt64(tableName, "resources_deleted")
	_diggerJobSummary.ResourcesUpdated = field.NewInt64(tableName, "resources_updated")

	_diggerJobSummary.fillFieldMap()

	return _diggerJobSummary
}

type diggerJobSummary struct {
	diggerJobSummaryDo

	ALL              field.Asterisk
	ID               field.String
	CreatedAt        field.Time
	UpdatedAt        field.Time
	DeletedAt        field.Field
	ResourcesCreated field.Int64
	ResourcesDeleted field.Int64
	ResourcesUpdated field.Int64

	fieldMap map[string]field.Expr
}

func (d diggerJobSummary) Table(newTableName string) *diggerJobSummary {
	d.diggerJobSummaryDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d diggerJobSummary) As(alias string) *diggerJobSummary {
	d.diggerJobSummaryDo.DO = *(d.diggerJobSummaryDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *diggerJobSummary) updateTableName(table string) *diggerJobSummary {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewString(table, "id")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.DeletedAt = field.NewField(table, "deleted_at")
	d.ResourcesCreated = field.NewInt64(table, "resources_created")
	d.ResourcesDeleted = field.NewInt64(table, "resources_deleted")
	d.ResourcesUpdated = field.NewInt64(table, "resources_updated")

	d.fillFieldMap()

	return d
}

func (d *diggerJobSummary) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *diggerJobSummary) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 7)
	d.fieldMap["id"] = d.ID
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["deleted_at"] = d.DeletedAt
	d.fieldMap["resources_created"] = d.ResourcesCreated
	d.fieldMap["resources_deleted"] = d.ResourcesDeleted
	d.fieldMap["resources_updated"] = d.ResourcesUpdated
}

func (d diggerJobSummary) clone(db *gorm.DB) diggerJobSummary {
	d.diggerJobSummaryDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d diggerJobSummary) replaceDB(db *gorm.DB) diggerJobSummary {
	d.diggerJobSummaryDo.ReplaceDB(db)
	return d
}

type diggerJobSummaryDo struct{ gen.DO }

type IDiggerJobSummaryDo interface {
	gen.SubQuery
	Debug() IDiggerJobSummaryDo
	WithContext(ctx context.Context) IDiggerJobSummaryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDiggerJobSummaryDo
	WriteDB() IDiggerJobSummaryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDiggerJobSummaryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDiggerJobSummaryDo
	Not(conds ...gen.Condition) IDiggerJobSummaryDo
	Or(conds ...gen.Condition) IDiggerJobSummaryDo
	Select(conds ...field.Expr) IDiggerJobSummaryDo
	Where(conds ...gen.Condition) IDiggerJobSummaryDo
	Order(conds ...field.Expr) IDiggerJobSummaryDo
	Distinct(cols ...field.Expr) IDiggerJobSummaryDo
	Omit(cols ...field.Expr) IDiggerJobSummaryDo
	Join(table schema.Tabler, on ...field.Expr) IDiggerJobSummaryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDiggerJobSummaryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDiggerJobSummaryDo
	Group(cols ...field.Expr) IDiggerJobSummaryDo
	Having(conds ...gen.Condition) IDiggerJobSummaryDo
	Limit(limit int) IDiggerJobSummaryDo
	Offset(offset int) IDiggerJobSummaryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDiggerJobSummaryDo
	Unscoped() IDiggerJobSummaryDo
	Create(values ...*model.DiggerJobSummary) error
	CreateInBatches(values []*model.DiggerJobSummary, batchSize int) error
	Save(values ...*model.DiggerJobSummary) error
	First() (*model.DiggerJobSummary, error)
	Take() (*model.DiggerJobSummary, error)
	Last() (*model.DiggerJobSummary, error)
	Find() ([]*model.DiggerJobSummary, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DiggerJobSummary, err error)
	FindInBatches(result *[]*model.DiggerJobSummary, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DiggerJobSummary) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDiggerJobSummaryDo
	Assign(attrs ...field.AssignExpr) IDiggerJobSummaryDo
	Joins(fields ...field.RelationField) IDiggerJobSummaryDo
	Preload(fields ...field.RelationField) IDiggerJobSummaryDo
	FirstOrInit() (*model.DiggerJobSummary, error)
	FirstOrCreate() (*model.DiggerJobSummary, error)
	FindByPage(offset int, limit int) (result []*model.DiggerJobSummary, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDiggerJobSummaryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d diggerJobSummaryDo) Debug() IDiggerJobSummaryDo {
	return d.withDO(d.DO.Debug())
}

func (d diggerJobSummaryDo) WithContext(ctx context.Context) IDiggerJobSummaryDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d diggerJobSummaryDo) ReadDB() IDiggerJobSummaryDo {
	return d.Clauses(dbresolver.Read)
}

func (d diggerJobSummaryDo) WriteDB() IDiggerJobSummaryDo {
	return d.Clauses(dbresolver.Write)
}

func (d diggerJobSummaryDo) Session(config *gorm.Session) IDiggerJobSummaryDo {
	return d.withDO(d.DO.Session(config))
}

func (d diggerJobSummaryDo) Clauses(conds ...clause.Expression) IDiggerJobSummaryDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d diggerJobSummaryDo) Returning(value interface{}, columns ...string) IDiggerJobSummaryDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d diggerJobSummaryDo) Not(conds ...gen.Condition) IDiggerJobSummaryDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d diggerJobSummaryDo) Or(conds ...gen.Condition) IDiggerJobSummaryDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d diggerJobSummaryDo) Select(conds ...field.Expr) IDiggerJobSummaryDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d diggerJobSummaryDo) Where(conds ...gen.Condition) IDiggerJobSummaryDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d diggerJobSummaryDo) Order(conds ...field.Expr) IDiggerJobSummaryDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d diggerJobSummaryDo) Distinct(cols ...field.Expr) IDiggerJobSummaryDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d diggerJobSummaryDo) Omit(cols ...field.Expr) IDiggerJobSummaryDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d diggerJobSummaryDo) Join(table schema.Tabler, on ...field.Expr) IDiggerJobSummaryDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d diggerJobSummaryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDiggerJobSummaryDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d diggerJobSummaryDo) RightJoin(table schema.Tabler, on ...field.Expr) IDiggerJobSummaryDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d diggerJobSummaryDo) Group(cols ...field.Expr) IDiggerJobSummaryDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d diggerJobSummaryDo) Having(conds ...gen.Condition) IDiggerJobSummaryDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d diggerJobSummaryDo) Limit(limit int) IDiggerJobSummaryDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d diggerJobSummaryDo) Offset(offset int) IDiggerJobSummaryDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d diggerJobSummaryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDiggerJobSummaryDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d diggerJobSummaryDo) Unscoped() IDiggerJobSummaryDo {
	return d.withDO(d.DO.Unscoped())
}

func (d diggerJobSummaryDo) Create(values ...*model.DiggerJobSummary) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d diggerJobSummaryDo) CreateInBatches(values []*model.DiggerJobSummary, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d diggerJobSummaryDo) Save(values ...*model.DiggerJobSummary) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d diggerJobSummaryDo) First() (*model.DiggerJobSummary, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiggerJobSummary), nil
	}
}

func (d diggerJobSummaryDo) Take() (*model.DiggerJobSummary, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiggerJobSummary), nil
	}
}

func (d diggerJobSummaryDo) Last() (*model.DiggerJobSummary, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiggerJobSummary), nil
	}
}

func (d diggerJobSummaryDo) Find() ([]*model.DiggerJobSummary, error) {
	result, err := d.DO.Find()
	return result.([]*model.DiggerJobSummary), err
}

func (d diggerJobSummaryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DiggerJobSummary, err error) {
	buf := make([]*model.DiggerJobSummary, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d diggerJobSummaryDo) FindInBatches(result *[]*model.DiggerJobSummary, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d diggerJobSummaryDo) Attrs(attrs ...field.AssignExpr) IDiggerJobSummaryDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d diggerJobSummaryDo) Assign(attrs ...field.AssignExpr) IDiggerJobSummaryDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d diggerJobSummaryDo) Joins(fields ...field.RelationField) IDiggerJobSummaryDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d diggerJobSummaryDo) Preload(fields ...field.RelationField) IDiggerJobSummaryDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d diggerJobSummaryDo) FirstOrInit() (*model.DiggerJobSummary, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiggerJobSummary), nil
	}
}

func (d diggerJobSummaryDo) FirstOrCreate() (*model.DiggerJobSummary, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiggerJobSummary), nil
	}
}

func (d diggerJobSummaryDo) FindByPage(offset int, limit int) (result []*model.DiggerJobSummary, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d diggerJobSummaryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d diggerJobSummaryDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d diggerJobSummaryDo) Delete(models ...*model.DiggerJobSummary) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *diggerJobSummaryDo) withDO(do gen.Dao) *diggerJobSummaryDo {
	d.DO = *do.(*gen.DO)
	return d
}
