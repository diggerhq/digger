// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models_generated

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/diggerhq/digger/next/model"
)

func newDiggerJobParentLink(db *gorm.DB, opts ...gen.DOOption) diggerJobParentLink {
	_diggerJobParentLink := diggerJobParentLink{}

	_diggerJobParentLink.diggerJobParentLinkDo.UseDB(db, opts...)
	_diggerJobParentLink.diggerJobParentLinkDo.UseModel(&model.DiggerJobParentLink{})

	tableName := _diggerJobParentLink.diggerJobParentLinkDo.TableName()
	_diggerJobParentLink.ALL = field.NewAsterisk(tableName)
	_diggerJobParentLink.ID = field.NewInt64(tableName, "id")
	_diggerJobParentLink.CreatedAt = field.NewTime(tableName, "created_at")
	_diggerJobParentLink.UpdatedAt = field.NewTime(tableName, "updated_at")
	_diggerJobParentLink.DeletedAt = field.NewField(tableName, "deleted_at")
	_diggerJobParentLink.DiggerJobID = field.NewString(tableName, "digger_job_id")
	_diggerJobParentLink.ParentDiggerJobID = field.NewString(tableName, "parent_digger_job_id")

	_diggerJobParentLink.fillFieldMap()

	return _diggerJobParentLink
}

type diggerJobParentLink struct {
	diggerJobParentLinkDo

	ALL               field.Asterisk
	ID                field.Int64
	CreatedAt         field.Time
	UpdatedAt         field.Time
	DeletedAt         field.Field
	DiggerJobID       field.String
	ParentDiggerJobID field.String

	fieldMap map[string]field.Expr
}

func (d diggerJobParentLink) Table(newTableName string) *diggerJobParentLink {
	d.diggerJobParentLinkDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d diggerJobParentLink) As(alias string) *diggerJobParentLink {
	d.diggerJobParentLinkDo.DO = *(d.diggerJobParentLinkDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *diggerJobParentLink) updateTableName(table string) *diggerJobParentLink {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.DeletedAt = field.NewField(table, "deleted_at")
	d.DiggerJobID = field.NewString(table, "digger_job_id")
	d.ParentDiggerJobID = field.NewString(table, "parent_digger_job_id")

	d.fillFieldMap()

	return d
}

func (d *diggerJobParentLink) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *diggerJobParentLink) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 6)
	d.fieldMap["id"] = d.ID
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["deleted_at"] = d.DeletedAt
	d.fieldMap["digger_job_id"] = d.DiggerJobID
	d.fieldMap["parent_digger_job_id"] = d.ParentDiggerJobID
}

func (d diggerJobParentLink) clone(db *gorm.DB) diggerJobParentLink {
	d.diggerJobParentLinkDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d diggerJobParentLink) replaceDB(db *gorm.DB) diggerJobParentLink {
	d.diggerJobParentLinkDo.ReplaceDB(db)
	return d
}

type diggerJobParentLinkDo struct{ gen.DO }

type IDiggerJobParentLinkDo interface {
	gen.SubQuery
	Debug() IDiggerJobParentLinkDo
	WithContext(ctx context.Context) IDiggerJobParentLinkDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDiggerJobParentLinkDo
	WriteDB() IDiggerJobParentLinkDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDiggerJobParentLinkDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDiggerJobParentLinkDo
	Not(conds ...gen.Condition) IDiggerJobParentLinkDo
	Or(conds ...gen.Condition) IDiggerJobParentLinkDo
	Select(conds ...field.Expr) IDiggerJobParentLinkDo
	Where(conds ...gen.Condition) IDiggerJobParentLinkDo
	Order(conds ...field.Expr) IDiggerJobParentLinkDo
	Distinct(cols ...field.Expr) IDiggerJobParentLinkDo
	Omit(cols ...field.Expr) IDiggerJobParentLinkDo
	Join(table schema.Tabler, on ...field.Expr) IDiggerJobParentLinkDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDiggerJobParentLinkDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDiggerJobParentLinkDo
	Group(cols ...field.Expr) IDiggerJobParentLinkDo
	Having(conds ...gen.Condition) IDiggerJobParentLinkDo
	Limit(limit int) IDiggerJobParentLinkDo
	Offset(offset int) IDiggerJobParentLinkDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDiggerJobParentLinkDo
	Unscoped() IDiggerJobParentLinkDo
	Create(values ...*model.DiggerJobParentLink) error
	CreateInBatches(values []*model.DiggerJobParentLink, batchSize int) error
	Save(values ...*model.DiggerJobParentLink) error
	First() (*model.DiggerJobParentLink, error)
	Take() (*model.DiggerJobParentLink, error)
	Last() (*model.DiggerJobParentLink, error)
	Find() ([]*model.DiggerJobParentLink, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DiggerJobParentLink, err error)
	FindInBatches(result *[]*model.DiggerJobParentLink, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DiggerJobParentLink) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDiggerJobParentLinkDo
	Assign(attrs ...field.AssignExpr) IDiggerJobParentLinkDo
	Joins(fields ...field.RelationField) IDiggerJobParentLinkDo
	Preload(fields ...field.RelationField) IDiggerJobParentLinkDo
	FirstOrInit() (*model.DiggerJobParentLink, error)
	FirstOrCreate() (*model.DiggerJobParentLink, error)
	FindByPage(offset int, limit int) (result []*model.DiggerJobParentLink, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDiggerJobParentLinkDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d diggerJobParentLinkDo) Debug() IDiggerJobParentLinkDo {
	return d.withDO(d.DO.Debug())
}

func (d diggerJobParentLinkDo) WithContext(ctx context.Context) IDiggerJobParentLinkDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d diggerJobParentLinkDo) ReadDB() IDiggerJobParentLinkDo {
	return d.Clauses(dbresolver.Read)
}

func (d diggerJobParentLinkDo) WriteDB() IDiggerJobParentLinkDo {
	return d.Clauses(dbresolver.Write)
}

func (d diggerJobParentLinkDo) Session(config *gorm.Session) IDiggerJobParentLinkDo {
	return d.withDO(d.DO.Session(config))
}

func (d diggerJobParentLinkDo) Clauses(conds ...clause.Expression) IDiggerJobParentLinkDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d diggerJobParentLinkDo) Returning(value interface{}, columns ...string) IDiggerJobParentLinkDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d diggerJobParentLinkDo) Not(conds ...gen.Condition) IDiggerJobParentLinkDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d diggerJobParentLinkDo) Or(conds ...gen.Condition) IDiggerJobParentLinkDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d diggerJobParentLinkDo) Select(conds ...field.Expr) IDiggerJobParentLinkDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d diggerJobParentLinkDo) Where(conds ...gen.Condition) IDiggerJobParentLinkDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d diggerJobParentLinkDo) Order(conds ...field.Expr) IDiggerJobParentLinkDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d diggerJobParentLinkDo) Distinct(cols ...field.Expr) IDiggerJobParentLinkDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d diggerJobParentLinkDo) Omit(cols ...field.Expr) IDiggerJobParentLinkDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d diggerJobParentLinkDo) Join(table schema.Tabler, on ...field.Expr) IDiggerJobParentLinkDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d diggerJobParentLinkDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDiggerJobParentLinkDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d diggerJobParentLinkDo) RightJoin(table schema.Tabler, on ...field.Expr) IDiggerJobParentLinkDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d diggerJobParentLinkDo) Group(cols ...field.Expr) IDiggerJobParentLinkDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d diggerJobParentLinkDo) Having(conds ...gen.Condition) IDiggerJobParentLinkDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d diggerJobParentLinkDo) Limit(limit int) IDiggerJobParentLinkDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d diggerJobParentLinkDo) Offset(offset int) IDiggerJobParentLinkDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d diggerJobParentLinkDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDiggerJobParentLinkDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d diggerJobParentLinkDo) Unscoped() IDiggerJobParentLinkDo {
	return d.withDO(d.DO.Unscoped())
}

func (d diggerJobParentLinkDo) Create(values ...*model.DiggerJobParentLink) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d diggerJobParentLinkDo) CreateInBatches(values []*model.DiggerJobParentLink, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d diggerJobParentLinkDo) Save(values ...*model.DiggerJobParentLink) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d diggerJobParentLinkDo) First() (*model.DiggerJobParentLink, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiggerJobParentLink), nil
	}
}

func (d diggerJobParentLinkDo) Take() (*model.DiggerJobParentLink, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiggerJobParentLink), nil
	}
}

func (d diggerJobParentLinkDo) Last() (*model.DiggerJobParentLink, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiggerJobParentLink), nil
	}
}

func (d diggerJobParentLinkDo) Find() ([]*model.DiggerJobParentLink, error) {
	result, err := d.DO.Find()
	return result.([]*model.DiggerJobParentLink), err
}

func (d diggerJobParentLinkDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DiggerJobParentLink, err error) {
	buf := make([]*model.DiggerJobParentLink, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d diggerJobParentLinkDo) FindInBatches(result *[]*model.DiggerJobParentLink, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d diggerJobParentLinkDo) Attrs(attrs ...field.AssignExpr) IDiggerJobParentLinkDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d diggerJobParentLinkDo) Assign(attrs ...field.AssignExpr) IDiggerJobParentLinkDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d diggerJobParentLinkDo) Joins(fields ...field.RelationField) IDiggerJobParentLinkDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d diggerJobParentLinkDo) Preload(fields ...field.RelationField) IDiggerJobParentLinkDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d diggerJobParentLinkDo) FirstOrInit() (*model.DiggerJobParentLink, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiggerJobParentLink), nil
	}
}

func (d diggerJobParentLinkDo) FirstOrCreate() (*model.DiggerJobParentLink, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiggerJobParentLink), nil
	}
}

func (d diggerJobParentLinkDo) FindByPage(offset int, limit int) (result []*model.DiggerJobParentLink, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d diggerJobParentLinkDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d diggerJobParentLinkDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d diggerJobParentLinkDo) Delete(models ...*model.DiggerJobParentLink) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *diggerJobParentLinkDo) withDO(do gen.Dao) *diggerJobParentLinkDo {
	d.DO = *do.(*gen.DO)
	return d
}
