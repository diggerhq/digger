// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models_generated

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/diggerhq/digger/next/model"
)

func newDiggerBatch(db *gorm.DB, opts ...gen.DOOption) diggerBatch {
	_diggerBatch := diggerBatch{}

	_diggerBatch.diggerBatchDo.UseDB(db, opts...)
	_diggerBatch.diggerBatchDo.UseModel(&model.DiggerBatch{})

	tableName := _diggerBatch.diggerBatchDo.TableName()
	_diggerBatch.ALL = field.NewAsterisk(tableName)
	_diggerBatch.ID = field.NewString(tableName, "id")
	_diggerBatch.PrNumber = field.NewInt64(tableName, "pr_number")
	_diggerBatch.Status = field.NewInt16(tableName, "status")
	_diggerBatch.BranchName = field.NewString(tableName, "branch_name")
	_diggerBatch.DiggerConfig = field.NewString(tableName, "digger_config")
	_diggerBatch.GithubInstallationID = field.NewInt64(tableName, "github_installation_id")
	_diggerBatch.RepoFullName = field.NewString(tableName, "repo_full_name")
	_diggerBatch.RepoOwner = field.NewString(tableName, "repo_owner")
	_diggerBatch.RepoName = field.NewString(tableName, "repo_name")
	_diggerBatch.BatchType = field.NewString(tableName, "batch_type")
	_diggerBatch.CommentID = field.NewInt64(tableName, "comment_id")
	_diggerBatch.SourceDetails = field.NewField(tableName, "source_details")
	_diggerBatch.Vcs = field.NewString(tableName, "vcs")
	_diggerBatch.GitlabProjectID = field.NewInt64(tableName, "gitlab_project_id")

	_diggerBatch.fillFieldMap()

	return _diggerBatch
}

type diggerBatch struct {
	diggerBatchDo

	ALL                  field.Asterisk
	ID                   field.String
	PrNumber             field.Int64
	Status               field.Int16
	BranchName           field.String
	DiggerConfig         field.String
	GithubInstallationID field.Int64
	RepoFullName         field.String
	RepoOwner            field.String
	RepoName             field.String
	BatchType            field.String
	CommentID            field.Int64
	SourceDetails        field.Field
	Vcs                  field.String
	GitlabProjectID      field.Int64

	fieldMap map[string]field.Expr
}

func (d diggerBatch) Table(newTableName string) *diggerBatch {
	d.diggerBatchDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d diggerBatch) As(alias string) *diggerBatch {
	d.diggerBatchDo.DO = *(d.diggerBatchDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *diggerBatch) updateTableName(table string) *diggerBatch {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewString(table, "id")
	d.PrNumber = field.NewInt64(table, "pr_number")
	d.Status = field.NewInt16(table, "status")
	d.BranchName = field.NewString(table, "branch_name")
	d.DiggerConfig = field.NewString(table, "digger_config")
	d.GithubInstallationID = field.NewInt64(table, "github_installation_id")
	d.RepoFullName = field.NewString(table, "repo_full_name")
	d.RepoOwner = field.NewString(table, "repo_owner")
	d.RepoName = field.NewString(table, "repo_name")
	d.BatchType = field.NewString(table, "batch_type")
	d.CommentID = field.NewInt64(table, "comment_id")
	d.SourceDetails = field.NewField(table, "source_details")
	d.Vcs = field.NewString(table, "vcs")
	d.GitlabProjectID = field.NewInt64(table, "gitlab_project_id")

	d.fillFieldMap()

	return d
}

func (d *diggerBatch) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *diggerBatch) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 14)
	d.fieldMap["id"] = d.ID
	d.fieldMap["pr_number"] = d.PrNumber
	d.fieldMap["status"] = d.Status
	d.fieldMap["branch_name"] = d.BranchName
	d.fieldMap["digger_config"] = d.DiggerConfig
	d.fieldMap["github_installation_id"] = d.GithubInstallationID
	d.fieldMap["repo_full_name"] = d.RepoFullName
	d.fieldMap["repo_owner"] = d.RepoOwner
	d.fieldMap["repo_name"] = d.RepoName
	d.fieldMap["batch_type"] = d.BatchType
	d.fieldMap["comment_id"] = d.CommentID
	d.fieldMap["source_details"] = d.SourceDetails
	d.fieldMap["vcs"] = d.Vcs
	d.fieldMap["gitlab_project_id"] = d.GitlabProjectID
}

func (d diggerBatch) clone(db *gorm.DB) diggerBatch {
	d.diggerBatchDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d diggerBatch) replaceDB(db *gorm.DB) diggerBatch {
	d.diggerBatchDo.ReplaceDB(db)
	return d
}

type diggerBatchDo struct{ gen.DO }

type IDiggerBatchDo interface {
	gen.SubQuery
	Debug() IDiggerBatchDo
	WithContext(ctx context.Context) IDiggerBatchDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDiggerBatchDo
	WriteDB() IDiggerBatchDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDiggerBatchDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDiggerBatchDo
	Not(conds ...gen.Condition) IDiggerBatchDo
	Or(conds ...gen.Condition) IDiggerBatchDo
	Select(conds ...field.Expr) IDiggerBatchDo
	Where(conds ...gen.Condition) IDiggerBatchDo
	Order(conds ...field.Expr) IDiggerBatchDo
	Distinct(cols ...field.Expr) IDiggerBatchDo
	Omit(cols ...field.Expr) IDiggerBatchDo
	Join(table schema.Tabler, on ...field.Expr) IDiggerBatchDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDiggerBatchDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDiggerBatchDo
	Group(cols ...field.Expr) IDiggerBatchDo
	Having(conds ...gen.Condition) IDiggerBatchDo
	Limit(limit int) IDiggerBatchDo
	Offset(offset int) IDiggerBatchDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDiggerBatchDo
	Unscoped() IDiggerBatchDo
	Create(values ...*model.DiggerBatch) error
	CreateInBatches(values []*model.DiggerBatch, batchSize int) error
	Save(values ...*model.DiggerBatch) error
	First() (*model.DiggerBatch, error)
	Take() (*model.DiggerBatch, error)
	Last() (*model.DiggerBatch, error)
	Find() ([]*model.DiggerBatch, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DiggerBatch, err error)
	FindInBatches(result *[]*model.DiggerBatch, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DiggerBatch) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDiggerBatchDo
	Assign(attrs ...field.AssignExpr) IDiggerBatchDo
	Joins(fields ...field.RelationField) IDiggerBatchDo
	Preload(fields ...field.RelationField) IDiggerBatchDo
	FirstOrInit() (*model.DiggerBatch, error)
	FirstOrCreate() (*model.DiggerBatch, error)
	FindByPage(offset int, limit int) (result []*model.DiggerBatch, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDiggerBatchDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d diggerBatchDo) Debug() IDiggerBatchDo {
	return d.withDO(d.DO.Debug())
}

func (d diggerBatchDo) WithContext(ctx context.Context) IDiggerBatchDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d diggerBatchDo) ReadDB() IDiggerBatchDo {
	return d.Clauses(dbresolver.Read)
}

func (d diggerBatchDo) WriteDB() IDiggerBatchDo {
	return d.Clauses(dbresolver.Write)
}

func (d diggerBatchDo) Session(config *gorm.Session) IDiggerBatchDo {
	return d.withDO(d.DO.Session(config))
}

func (d diggerBatchDo) Clauses(conds ...clause.Expression) IDiggerBatchDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d diggerBatchDo) Returning(value interface{}, columns ...string) IDiggerBatchDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d diggerBatchDo) Not(conds ...gen.Condition) IDiggerBatchDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d diggerBatchDo) Or(conds ...gen.Condition) IDiggerBatchDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d diggerBatchDo) Select(conds ...field.Expr) IDiggerBatchDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d diggerBatchDo) Where(conds ...gen.Condition) IDiggerBatchDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d diggerBatchDo) Order(conds ...field.Expr) IDiggerBatchDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d diggerBatchDo) Distinct(cols ...field.Expr) IDiggerBatchDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d diggerBatchDo) Omit(cols ...field.Expr) IDiggerBatchDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d diggerBatchDo) Join(table schema.Tabler, on ...field.Expr) IDiggerBatchDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d diggerBatchDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDiggerBatchDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d diggerBatchDo) RightJoin(table schema.Tabler, on ...field.Expr) IDiggerBatchDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d diggerBatchDo) Group(cols ...field.Expr) IDiggerBatchDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d diggerBatchDo) Having(conds ...gen.Condition) IDiggerBatchDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d diggerBatchDo) Limit(limit int) IDiggerBatchDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d diggerBatchDo) Offset(offset int) IDiggerBatchDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d diggerBatchDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDiggerBatchDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d diggerBatchDo) Unscoped() IDiggerBatchDo {
	return d.withDO(d.DO.Unscoped())
}

func (d diggerBatchDo) Create(values ...*model.DiggerBatch) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d diggerBatchDo) CreateInBatches(values []*model.DiggerBatch, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d diggerBatchDo) Save(values ...*model.DiggerBatch) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d diggerBatchDo) First() (*model.DiggerBatch, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiggerBatch), nil
	}
}

func (d diggerBatchDo) Take() (*model.DiggerBatch, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiggerBatch), nil
	}
}

func (d diggerBatchDo) Last() (*model.DiggerBatch, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiggerBatch), nil
	}
}

func (d diggerBatchDo) Find() ([]*model.DiggerBatch, error) {
	result, err := d.DO.Find()
	return result.([]*model.DiggerBatch), err
}

func (d diggerBatchDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DiggerBatch, err error) {
	buf := make([]*model.DiggerBatch, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d diggerBatchDo) FindInBatches(result *[]*model.DiggerBatch, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d diggerBatchDo) Attrs(attrs ...field.AssignExpr) IDiggerBatchDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d diggerBatchDo) Assign(attrs ...field.AssignExpr) IDiggerBatchDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d diggerBatchDo) Joins(fields ...field.RelationField) IDiggerBatchDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d diggerBatchDo) Preload(fields ...field.RelationField) IDiggerBatchDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d diggerBatchDo) FirstOrInit() (*model.DiggerBatch, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiggerBatch), nil
	}
}

func (d diggerBatchDo) FirstOrCreate() (*model.DiggerBatch, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiggerBatch), nil
	}
}

func (d diggerBatchDo) FindByPage(offset int, limit int) (result []*model.DiggerBatch, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d diggerBatchDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d diggerBatchDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d diggerBatchDo) Delete(models ...*model.DiggerBatch) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *diggerBatchDo) withDO(do gen.Dao) *diggerBatchDo {
	d.DO = *do.(*gen.DO)
	return d
}
