// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models_generated

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/diggerhq/digger/next/model"
)

func newUserPrivateInfo(db *gorm.DB, opts ...gen.DOOption) userPrivateInfo {
	_userPrivateInfo := userPrivateInfo{}

	_userPrivateInfo.userPrivateInfoDo.UseDB(db, opts...)
	_userPrivateInfo.userPrivateInfoDo.UseModel(&model.UserPrivateInfo{})

	tableName := _userPrivateInfo.userPrivateInfoDo.TableName()
	_userPrivateInfo.ALL = field.NewAsterisk(tableName)
	_userPrivateInfo.ID = field.NewString(tableName, "id")
	_userPrivateInfo.CreatedAt = field.NewTime(tableName, "created_at")
	_userPrivateInfo.DefaultOrganization = field.NewString(tableName, "default_organization")

	_userPrivateInfo.fillFieldMap()

	return _userPrivateInfo
}

type userPrivateInfo struct {
	userPrivateInfoDo

	ALL                 field.Asterisk
	ID                  field.String
	CreatedAt           field.Time
	DefaultOrganization field.String

	fieldMap map[string]field.Expr
}

func (u userPrivateInfo) Table(newTableName string) *userPrivateInfo {
	u.userPrivateInfoDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userPrivateInfo) As(alias string) *userPrivateInfo {
	u.userPrivateInfoDo.DO = *(u.userPrivateInfoDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userPrivateInfo) updateTableName(table string) *userPrivateInfo {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewString(table, "id")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.DefaultOrganization = field.NewString(table, "default_organization")

	u.fillFieldMap()

	return u
}

func (u *userPrivateInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userPrivateInfo) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 3)
	u.fieldMap["id"] = u.ID
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["default_organization"] = u.DefaultOrganization
}

func (u userPrivateInfo) clone(db *gorm.DB) userPrivateInfo {
	u.userPrivateInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userPrivateInfo) replaceDB(db *gorm.DB) userPrivateInfo {
	u.userPrivateInfoDo.ReplaceDB(db)
	return u
}

type userPrivateInfoDo struct{ gen.DO }

type IUserPrivateInfoDo interface {
	gen.SubQuery
	Debug() IUserPrivateInfoDo
	WithContext(ctx context.Context) IUserPrivateInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserPrivateInfoDo
	WriteDB() IUserPrivateInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserPrivateInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserPrivateInfoDo
	Not(conds ...gen.Condition) IUserPrivateInfoDo
	Or(conds ...gen.Condition) IUserPrivateInfoDo
	Select(conds ...field.Expr) IUserPrivateInfoDo
	Where(conds ...gen.Condition) IUserPrivateInfoDo
	Order(conds ...field.Expr) IUserPrivateInfoDo
	Distinct(cols ...field.Expr) IUserPrivateInfoDo
	Omit(cols ...field.Expr) IUserPrivateInfoDo
	Join(table schema.Tabler, on ...field.Expr) IUserPrivateInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserPrivateInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserPrivateInfoDo
	Group(cols ...field.Expr) IUserPrivateInfoDo
	Having(conds ...gen.Condition) IUserPrivateInfoDo
	Limit(limit int) IUserPrivateInfoDo
	Offset(offset int) IUserPrivateInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserPrivateInfoDo
	Unscoped() IUserPrivateInfoDo
	Create(values ...*model.UserPrivateInfo) error
	CreateInBatches(values []*model.UserPrivateInfo, batchSize int) error
	Save(values ...*model.UserPrivateInfo) error
	First() (*model.UserPrivateInfo, error)
	Take() (*model.UserPrivateInfo, error)
	Last() (*model.UserPrivateInfo, error)
	Find() ([]*model.UserPrivateInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserPrivateInfo, err error)
	FindInBatches(result *[]*model.UserPrivateInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserPrivateInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserPrivateInfoDo
	Assign(attrs ...field.AssignExpr) IUserPrivateInfoDo
	Joins(fields ...field.RelationField) IUserPrivateInfoDo
	Preload(fields ...field.RelationField) IUserPrivateInfoDo
	FirstOrInit() (*model.UserPrivateInfo, error)
	FirstOrCreate() (*model.UserPrivateInfo, error)
	FindByPage(offset int, limit int) (result []*model.UserPrivateInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserPrivateInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userPrivateInfoDo) Debug() IUserPrivateInfoDo {
	return u.withDO(u.DO.Debug())
}

func (u userPrivateInfoDo) WithContext(ctx context.Context) IUserPrivateInfoDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userPrivateInfoDo) ReadDB() IUserPrivateInfoDo {
	return u.Clauses(dbresolver.Read)
}

func (u userPrivateInfoDo) WriteDB() IUserPrivateInfoDo {
	return u.Clauses(dbresolver.Write)
}

func (u userPrivateInfoDo) Session(config *gorm.Session) IUserPrivateInfoDo {
	return u.withDO(u.DO.Session(config))
}

func (u userPrivateInfoDo) Clauses(conds ...clause.Expression) IUserPrivateInfoDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userPrivateInfoDo) Returning(value interface{}, columns ...string) IUserPrivateInfoDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userPrivateInfoDo) Not(conds ...gen.Condition) IUserPrivateInfoDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userPrivateInfoDo) Or(conds ...gen.Condition) IUserPrivateInfoDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userPrivateInfoDo) Select(conds ...field.Expr) IUserPrivateInfoDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userPrivateInfoDo) Where(conds ...gen.Condition) IUserPrivateInfoDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userPrivateInfoDo) Order(conds ...field.Expr) IUserPrivateInfoDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userPrivateInfoDo) Distinct(cols ...field.Expr) IUserPrivateInfoDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userPrivateInfoDo) Omit(cols ...field.Expr) IUserPrivateInfoDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userPrivateInfoDo) Join(table schema.Tabler, on ...field.Expr) IUserPrivateInfoDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userPrivateInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserPrivateInfoDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userPrivateInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserPrivateInfoDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userPrivateInfoDo) Group(cols ...field.Expr) IUserPrivateInfoDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userPrivateInfoDo) Having(conds ...gen.Condition) IUserPrivateInfoDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userPrivateInfoDo) Limit(limit int) IUserPrivateInfoDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userPrivateInfoDo) Offset(offset int) IUserPrivateInfoDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userPrivateInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserPrivateInfoDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userPrivateInfoDo) Unscoped() IUserPrivateInfoDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userPrivateInfoDo) Create(values ...*model.UserPrivateInfo) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userPrivateInfoDo) CreateInBatches(values []*model.UserPrivateInfo, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userPrivateInfoDo) Save(values ...*model.UserPrivateInfo) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userPrivateInfoDo) First() (*model.UserPrivateInfo, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPrivateInfo), nil
	}
}

func (u userPrivateInfoDo) Take() (*model.UserPrivateInfo, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPrivateInfo), nil
	}
}

func (u userPrivateInfoDo) Last() (*model.UserPrivateInfo, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPrivateInfo), nil
	}
}

func (u userPrivateInfoDo) Find() ([]*model.UserPrivateInfo, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserPrivateInfo), err
}

func (u userPrivateInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserPrivateInfo, err error) {
	buf := make([]*model.UserPrivateInfo, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userPrivateInfoDo) FindInBatches(result *[]*model.UserPrivateInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userPrivateInfoDo) Attrs(attrs ...field.AssignExpr) IUserPrivateInfoDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userPrivateInfoDo) Assign(attrs ...field.AssignExpr) IUserPrivateInfoDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userPrivateInfoDo) Joins(fields ...field.RelationField) IUserPrivateInfoDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userPrivateInfoDo) Preload(fields ...field.RelationField) IUserPrivateInfoDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userPrivateInfoDo) FirstOrInit() (*model.UserPrivateInfo, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPrivateInfo), nil
	}
}

func (u userPrivateInfoDo) FirstOrCreate() (*model.UserPrivateInfo, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPrivateInfo), nil
	}
}

func (u userPrivateInfoDo) FindByPage(offset int, limit int) (result []*model.UserPrivateInfo, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userPrivateInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userPrivateInfoDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userPrivateInfoDo) Delete(models ...*model.UserPrivateInfo) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userPrivateInfoDo) withDO(do gen.Dao) *userPrivateInfoDo {
	u.DO = *do.(*gen.DO)
	return u
}
