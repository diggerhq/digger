// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models_generated

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/diggerhq/digger/next/model"
)

func newDiggerRun(db *gorm.DB, opts ...gen.DOOption) diggerRun {
	_diggerRun := diggerRun{}

	_diggerRun.diggerRunDo.UseDB(db, opts...)
	_diggerRun.diggerRunDo.UseModel(&model.DiggerRun{})

	tableName := _diggerRun.diggerRunDo.TableName()
	_diggerRun.ALL = field.NewAsterisk(tableName)
	_diggerRun.ID = field.NewString(tableName, "id")
	_diggerRun.CreatedAt = field.NewTime(tableName, "created_at")
	_diggerRun.UpdatedAt = field.NewTime(tableName, "updated_at")
	_diggerRun.DeletedAt = field.NewField(tableName, "deleted_at")
	_diggerRun.Triggertype = field.NewString(tableName, "triggertype")
	_diggerRun.PrNumber = field.NewInt64(tableName, "pr_number")
	_diggerRun.Status = field.NewString(tableName, "status")
	_diggerRun.CommitID = field.NewString(tableName, "commit_id")
	_diggerRun.DiggerConfig = field.NewString(tableName, "digger_config")
	_diggerRun.GithubInstallationID = field.NewInt64(tableName, "github_installation_id")
	_diggerRun.RepoID = field.NewInt64(tableName, "repo_id")
	_diggerRun.RunType = field.NewString(tableName, "run_type")
	_diggerRun.PlanStageID = field.NewString(tableName, "plan_stage_id")
	_diggerRun.ApplyStageID = field.NewString(tableName, "apply_stage_id")
	_diggerRun.ProjectName = field.NewString(tableName, "project_name")
	_diggerRun.IsApproved = field.NewBool(tableName, "is_approved")
	_diggerRun.ApprovalAuthor = field.NewString(tableName, "approval_author")
	_diggerRun.ApprovalDate = field.NewTime(tableName, "approval_date")
	_diggerRun.ProjectID = field.NewString(tableName, "project_id")
	_diggerRun.TerraformOutput = field.NewString(tableName, "terraform_output")
	_diggerRun.ApplyLogs = field.NewString(tableName, "apply_logs")
	_diggerRun.ApproverUserID = field.NewString(tableName, "approver_user_id")

	_diggerRun.fillFieldMap()

	return _diggerRun
}

type diggerRun struct {
	diggerRunDo

	ALL                  field.Asterisk
	ID                   field.String
	CreatedAt            field.Time
	UpdatedAt            field.Time
	DeletedAt            field.Field
	Triggertype          field.String
	PrNumber             field.Int64
	Status               field.String
	CommitID             field.String
	DiggerConfig         field.String
	GithubInstallationID field.Int64
	RepoID               field.Int64
	RunType              field.String
	PlanStageID          field.String
	ApplyStageID         field.String
	ProjectName          field.String
	IsApproved           field.Bool
	ApprovalAuthor       field.String
	ApprovalDate         field.Time
	ProjectID            field.String
	TerraformOutput      field.String
	ApplyLogs            field.String
	ApproverUserID       field.String

	fieldMap map[string]field.Expr
}

func (d diggerRun) Table(newTableName string) *diggerRun {
	d.diggerRunDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d diggerRun) As(alias string) *diggerRun {
	d.diggerRunDo.DO = *(d.diggerRunDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *diggerRun) updateTableName(table string) *diggerRun {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewString(table, "id")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.DeletedAt = field.NewField(table, "deleted_at")
	d.Triggertype = field.NewString(table, "triggertype")
	d.PrNumber = field.NewInt64(table, "pr_number")
	d.Status = field.NewString(table, "status")
	d.CommitID = field.NewString(table, "commit_id")
	d.DiggerConfig = field.NewString(table, "digger_config")
	d.GithubInstallationID = field.NewInt64(table, "github_installation_id")
	d.RepoID = field.NewInt64(table, "repo_id")
	d.RunType = field.NewString(table, "run_type")
	d.PlanStageID = field.NewString(table, "plan_stage_id")
	d.ApplyStageID = field.NewString(table, "apply_stage_id")
	d.ProjectName = field.NewString(table, "project_name")
	d.IsApproved = field.NewBool(table, "is_approved")
	d.ApprovalAuthor = field.NewString(table, "approval_author")
	d.ApprovalDate = field.NewTime(table, "approval_date")
	d.ProjectID = field.NewString(table, "project_id")
	d.TerraformOutput = field.NewString(table, "terraform_output")
	d.ApplyLogs = field.NewString(table, "apply_logs")
	d.ApproverUserID = field.NewString(table, "approver_user_id")

	d.fillFieldMap()

	return d
}

func (d *diggerRun) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *diggerRun) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 22)
	d.fieldMap["id"] = d.ID
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["deleted_at"] = d.DeletedAt
	d.fieldMap["triggertype"] = d.Triggertype
	d.fieldMap["pr_number"] = d.PrNumber
	d.fieldMap["status"] = d.Status
	d.fieldMap["commit_id"] = d.CommitID
	d.fieldMap["digger_config"] = d.DiggerConfig
	d.fieldMap["github_installation_id"] = d.GithubInstallationID
	d.fieldMap["repo_id"] = d.RepoID
	d.fieldMap["run_type"] = d.RunType
	d.fieldMap["plan_stage_id"] = d.PlanStageID
	d.fieldMap["apply_stage_id"] = d.ApplyStageID
	d.fieldMap["project_name"] = d.ProjectName
	d.fieldMap["is_approved"] = d.IsApproved
	d.fieldMap["approval_author"] = d.ApprovalAuthor
	d.fieldMap["approval_date"] = d.ApprovalDate
	d.fieldMap["project_id"] = d.ProjectID
	d.fieldMap["terraform_output"] = d.TerraformOutput
	d.fieldMap["apply_logs"] = d.ApplyLogs
	d.fieldMap["approver_user_id"] = d.ApproverUserID
}

func (d diggerRun) clone(db *gorm.DB) diggerRun {
	d.diggerRunDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d diggerRun) replaceDB(db *gorm.DB) diggerRun {
	d.diggerRunDo.ReplaceDB(db)
	return d
}

type diggerRunDo struct{ gen.DO }

type IDiggerRunDo interface {
	gen.SubQuery
	Debug() IDiggerRunDo
	WithContext(ctx context.Context) IDiggerRunDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDiggerRunDo
	WriteDB() IDiggerRunDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDiggerRunDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDiggerRunDo
	Not(conds ...gen.Condition) IDiggerRunDo
	Or(conds ...gen.Condition) IDiggerRunDo
	Select(conds ...field.Expr) IDiggerRunDo
	Where(conds ...gen.Condition) IDiggerRunDo
	Order(conds ...field.Expr) IDiggerRunDo
	Distinct(cols ...field.Expr) IDiggerRunDo
	Omit(cols ...field.Expr) IDiggerRunDo
	Join(table schema.Tabler, on ...field.Expr) IDiggerRunDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDiggerRunDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDiggerRunDo
	Group(cols ...field.Expr) IDiggerRunDo
	Having(conds ...gen.Condition) IDiggerRunDo
	Limit(limit int) IDiggerRunDo
	Offset(offset int) IDiggerRunDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDiggerRunDo
	Unscoped() IDiggerRunDo
	Create(values ...*model.DiggerRun) error
	CreateInBatches(values []*model.DiggerRun, batchSize int) error
	Save(values ...*model.DiggerRun) error
	First() (*model.DiggerRun, error)
	Take() (*model.DiggerRun, error)
	Last() (*model.DiggerRun, error)
	Find() ([]*model.DiggerRun, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DiggerRun, err error)
	FindInBatches(result *[]*model.DiggerRun, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DiggerRun) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDiggerRunDo
	Assign(attrs ...field.AssignExpr) IDiggerRunDo
	Joins(fields ...field.RelationField) IDiggerRunDo
	Preload(fields ...field.RelationField) IDiggerRunDo
	FirstOrInit() (*model.DiggerRun, error)
	FirstOrCreate() (*model.DiggerRun, error)
	FindByPage(offset int, limit int) (result []*model.DiggerRun, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDiggerRunDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d diggerRunDo) Debug() IDiggerRunDo {
	return d.withDO(d.DO.Debug())
}

func (d diggerRunDo) WithContext(ctx context.Context) IDiggerRunDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d diggerRunDo) ReadDB() IDiggerRunDo {
	return d.Clauses(dbresolver.Read)
}

func (d diggerRunDo) WriteDB() IDiggerRunDo {
	return d.Clauses(dbresolver.Write)
}

func (d diggerRunDo) Session(config *gorm.Session) IDiggerRunDo {
	return d.withDO(d.DO.Session(config))
}

func (d diggerRunDo) Clauses(conds ...clause.Expression) IDiggerRunDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d diggerRunDo) Returning(value interface{}, columns ...string) IDiggerRunDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d diggerRunDo) Not(conds ...gen.Condition) IDiggerRunDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d diggerRunDo) Or(conds ...gen.Condition) IDiggerRunDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d diggerRunDo) Select(conds ...field.Expr) IDiggerRunDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d diggerRunDo) Where(conds ...gen.Condition) IDiggerRunDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d diggerRunDo) Order(conds ...field.Expr) IDiggerRunDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d diggerRunDo) Distinct(cols ...field.Expr) IDiggerRunDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d diggerRunDo) Omit(cols ...field.Expr) IDiggerRunDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d diggerRunDo) Join(table schema.Tabler, on ...field.Expr) IDiggerRunDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d diggerRunDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDiggerRunDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d diggerRunDo) RightJoin(table schema.Tabler, on ...field.Expr) IDiggerRunDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d diggerRunDo) Group(cols ...field.Expr) IDiggerRunDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d diggerRunDo) Having(conds ...gen.Condition) IDiggerRunDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d diggerRunDo) Limit(limit int) IDiggerRunDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d diggerRunDo) Offset(offset int) IDiggerRunDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d diggerRunDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDiggerRunDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d diggerRunDo) Unscoped() IDiggerRunDo {
	return d.withDO(d.DO.Unscoped())
}

func (d diggerRunDo) Create(values ...*model.DiggerRun) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d diggerRunDo) CreateInBatches(values []*model.DiggerRun, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d diggerRunDo) Save(values ...*model.DiggerRun) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d diggerRunDo) First() (*model.DiggerRun, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiggerRun), nil
	}
}

func (d diggerRunDo) Take() (*model.DiggerRun, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiggerRun), nil
	}
}

func (d diggerRunDo) Last() (*model.DiggerRun, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiggerRun), nil
	}
}

func (d diggerRunDo) Find() ([]*model.DiggerRun, error) {
	result, err := d.DO.Find()
	return result.([]*model.DiggerRun), err
}

func (d diggerRunDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DiggerRun, err error) {
	buf := make([]*model.DiggerRun, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d diggerRunDo) FindInBatches(result *[]*model.DiggerRun, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d diggerRunDo) Attrs(attrs ...field.AssignExpr) IDiggerRunDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d diggerRunDo) Assign(attrs ...field.AssignExpr) IDiggerRunDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d diggerRunDo) Joins(fields ...field.RelationField) IDiggerRunDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d diggerRunDo) Preload(fields ...field.RelationField) IDiggerRunDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d diggerRunDo) FirstOrInit() (*model.DiggerRun, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiggerRun), nil
	}
}

func (d diggerRunDo) FirstOrCreate() (*model.DiggerRun, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiggerRun), nil
	}
}

func (d diggerRunDo) FindByPage(offset int, limit int) (result []*model.DiggerRun, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d diggerRunDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d diggerRunDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d diggerRunDo) Delete(models ...*model.DiggerRun) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *diggerRunDo) withDO(do gen.Dao) *diggerRunDo {
	d.DO = *do.(*gen.DO)
	return d
}
