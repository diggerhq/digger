// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models_generated

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/diggerhq/digger/next/model"
)

func newDiggerRunQueueItem(db *gorm.DB, opts ...gen.DOOption) diggerRunQueueItem {
	_diggerRunQueueItem := diggerRunQueueItem{}

	_diggerRunQueueItem.diggerRunQueueItemDo.UseDB(db, opts...)
	_diggerRunQueueItem.diggerRunQueueItemDo.UseModel(&model.DiggerRunQueueItem{})

	tableName := _diggerRunQueueItem.diggerRunQueueItemDo.TableName()
	_diggerRunQueueItem.ALL = field.NewAsterisk(tableName)
	_diggerRunQueueItem.ID = field.NewInt64(tableName, "id")
	_diggerRunQueueItem.CreatedAt = field.NewTime(tableName, "created_at")
	_diggerRunQueueItem.UpdatedAt = field.NewTime(tableName, "updated_at")
	_diggerRunQueueItem.DeletedAt = field.NewField(tableName, "deleted_at")
	_diggerRunQueueItem.DiggerRunID = field.NewString(tableName, "digger_run_id")
	_diggerRunQueueItem.ProjectID = field.NewString(tableName, "project_id")

	_diggerRunQueueItem.fillFieldMap()

	return _diggerRunQueueItem
}

type diggerRunQueueItem struct {
	diggerRunQueueItemDo

	ALL         field.Asterisk
	ID          field.Int64
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	DiggerRunID field.String
	ProjectID   field.String

	fieldMap map[string]field.Expr
}

func (d diggerRunQueueItem) Table(newTableName string) *diggerRunQueueItem {
	d.diggerRunQueueItemDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d diggerRunQueueItem) As(alias string) *diggerRunQueueItem {
	d.diggerRunQueueItemDo.DO = *(d.diggerRunQueueItemDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *diggerRunQueueItem) updateTableName(table string) *diggerRunQueueItem {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.DeletedAt = field.NewField(table, "deleted_at")
	d.DiggerRunID = field.NewString(table, "digger_run_id")
	d.ProjectID = field.NewString(table, "project_id")

	d.fillFieldMap()

	return d
}

func (d *diggerRunQueueItem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *diggerRunQueueItem) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 6)
	d.fieldMap["id"] = d.ID
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["deleted_at"] = d.DeletedAt
	d.fieldMap["digger_run_id"] = d.DiggerRunID
	d.fieldMap["project_id"] = d.ProjectID
}

func (d diggerRunQueueItem) clone(db *gorm.DB) diggerRunQueueItem {
	d.diggerRunQueueItemDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d diggerRunQueueItem) replaceDB(db *gorm.DB) diggerRunQueueItem {
	d.diggerRunQueueItemDo.ReplaceDB(db)
	return d
}

type diggerRunQueueItemDo struct{ gen.DO }

type IDiggerRunQueueItemDo interface {
	gen.SubQuery
	Debug() IDiggerRunQueueItemDo
	WithContext(ctx context.Context) IDiggerRunQueueItemDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDiggerRunQueueItemDo
	WriteDB() IDiggerRunQueueItemDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDiggerRunQueueItemDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDiggerRunQueueItemDo
	Not(conds ...gen.Condition) IDiggerRunQueueItemDo
	Or(conds ...gen.Condition) IDiggerRunQueueItemDo
	Select(conds ...field.Expr) IDiggerRunQueueItemDo
	Where(conds ...gen.Condition) IDiggerRunQueueItemDo
	Order(conds ...field.Expr) IDiggerRunQueueItemDo
	Distinct(cols ...field.Expr) IDiggerRunQueueItemDo
	Omit(cols ...field.Expr) IDiggerRunQueueItemDo
	Join(table schema.Tabler, on ...field.Expr) IDiggerRunQueueItemDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDiggerRunQueueItemDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDiggerRunQueueItemDo
	Group(cols ...field.Expr) IDiggerRunQueueItemDo
	Having(conds ...gen.Condition) IDiggerRunQueueItemDo
	Limit(limit int) IDiggerRunQueueItemDo
	Offset(offset int) IDiggerRunQueueItemDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDiggerRunQueueItemDo
	Unscoped() IDiggerRunQueueItemDo
	Create(values ...*model.DiggerRunQueueItem) error
	CreateInBatches(values []*model.DiggerRunQueueItem, batchSize int) error
	Save(values ...*model.DiggerRunQueueItem) error
	First() (*model.DiggerRunQueueItem, error)
	Take() (*model.DiggerRunQueueItem, error)
	Last() (*model.DiggerRunQueueItem, error)
	Find() ([]*model.DiggerRunQueueItem, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DiggerRunQueueItem, err error)
	FindInBatches(result *[]*model.DiggerRunQueueItem, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DiggerRunQueueItem) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDiggerRunQueueItemDo
	Assign(attrs ...field.AssignExpr) IDiggerRunQueueItemDo
	Joins(fields ...field.RelationField) IDiggerRunQueueItemDo
	Preload(fields ...field.RelationField) IDiggerRunQueueItemDo
	FirstOrInit() (*model.DiggerRunQueueItem, error)
	FirstOrCreate() (*model.DiggerRunQueueItem, error)
	FindByPage(offset int, limit int) (result []*model.DiggerRunQueueItem, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDiggerRunQueueItemDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d diggerRunQueueItemDo) Debug() IDiggerRunQueueItemDo {
	return d.withDO(d.DO.Debug())
}

func (d diggerRunQueueItemDo) WithContext(ctx context.Context) IDiggerRunQueueItemDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d diggerRunQueueItemDo) ReadDB() IDiggerRunQueueItemDo {
	return d.Clauses(dbresolver.Read)
}

func (d diggerRunQueueItemDo) WriteDB() IDiggerRunQueueItemDo {
	return d.Clauses(dbresolver.Write)
}

func (d diggerRunQueueItemDo) Session(config *gorm.Session) IDiggerRunQueueItemDo {
	return d.withDO(d.DO.Session(config))
}

func (d diggerRunQueueItemDo) Clauses(conds ...clause.Expression) IDiggerRunQueueItemDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d diggerRunQueueItemDo) Returning(value interface{}, columns ...string) IDiggerRunQueueItemDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d diggerRunQueueItemDo) Not(conds ...gen.Condition) IDiggerRunQueueItemDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d diggerRunQueueItemDo) Or(conds ...gen.Condition) IDiggerRunQueueItemDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d diggerRunQueueItemDo) Select(conds ...field.Expr) IDiggerRunQueueItemDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d diggerRunQueueItemDo) Where(conds ...gen.Condition) IDiggerRunQueueItemDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d diggerRunQueueItemDo) Order(conds ...field.Expr) IDiggerRunQueueItemDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d diggerRunQueueItemDo) Distinct(cols ...field.Expr) IDiggerRunQueueItemDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d diggerRunQueueItemDo) Omit(cols ...field.Expr) IDiggerRunQueueItemDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d diggerRunQueueItemDo) Join(table schema.Tabler, on ...field.Expr) IDiggerRunQueueItemDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d diggerRunQueueItemDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDiggerRunQueueItemDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d diggerRunQueueItemDo) RightJoin(table schema.Tabler, on ...field.Expr) IDiggerRunQueueItemDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d diggerRunQueueItemDo) Group(cols ...field.Expr) IDiggerRunQueueItemDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d diggerRunQueueItemDo) Having(conds ...gen.Condition) IDiggerRunQueueItemDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d diggerRunQueueItemDo) Limit(limit int) IDiggerRunQueueItemDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d diggerRunQueueItemDo) Offset(offset int) IDiggerRunQueueItemDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d diggerRunQueueItemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDiggerRunQueueItemDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d diggerRunQueueItemDo) Unscoped() IDiggerRunQueueItemDo {
	return d.withDO(d.DO.Unscoped())
}

func (d diggerRunQueueItemDo) Create(values ...*model.DiggerRunQueueItem) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d diggerRunQueueItemDo) CreateInBatches(values []*model.DiggerRunQueueItem, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d diggerRunQueueItemDo) Save(values ...*model.DiggerRunQueueItem) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d diggerRunQueueItemDo) First() (*model.DiggerRunQueueItem, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiggerRunQueueItem), nil
	}
}

func (d diggerRunQueueItemDo) Take() (*model.DiggerRunQueueItem, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiggerRunQueueItem), nil
	}
}

func (d diggerRunQueueItemDo) Last() (*model.DiggerRunQueueItem, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiggerRunQueueItem), nil
	}
}

func (d diggerRunQueueItemDo) Find() ([]*model.DiggerRunQueueItem, error) {
	result, err := d.DO.Find()
	return result.([]*model.DiggerRunQueueItem), err
}

func (d diggerRunQueueItemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DiggerRunQueueItem, err error) {
	buf := make([]*model.DiggerRunQueueItem, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d diggerRunQueueItemDo) FindInBatches(result *[]*model.DiggerRunQueueItem, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d diggerRunQueueItemDo) Attrs(attrs ...field.AssignExpr) IDiggerRunQueueItemDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d diggerRunQueueItemDo) Assign(attrs ...field.AssignExpr) IDiggerRunQueueItemDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d diggerRunQueueItemDo) Joins(fields ...field.RelationField) IDiggerRunQueueItemDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d diggerRunQueueItemDo) Preload(fields ...field.RelationField) IDiggerRunQueueItemDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d diggerRunQueueItemDo) FirstOrInit() (*model.DiggerRunQueueItem, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiggerRunQueueItem), nil
	}
}

func (d diggerRunQueueItemDo) FirstOrCreate() (*model.DiggerRunQueueItem, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiggerRunQueueItem), nil
	}
}

func (d diggerRunQueueItemDo) FindByPage(offset int, limit int) (result []*model.DiggerRunQueueItem, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d diggerRunQueueItemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d diggerRunQueueItemDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d diggerRunQueueItemDo) Delete(models ...*model.DiggerRunQueueItem) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *diggerRunQueueItemDo) withDO(do gen.Dao) *diggerRunQueueItemDo {
	d.DO = *do.(*gen.DO)
	return d
}
