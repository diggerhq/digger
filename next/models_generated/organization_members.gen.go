// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models_generated

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/diggerhq/digger/next/model"
)

func newOrganizationMember(db *gorm.DB, opts ...gen.DOOption) organizationMember {
	_organizationMember := organizationMember{}

	_organizationMember.organizationMemberDo.UseDB(db, opts...)
	_organizationMember.organizationMemberDo.UseModel(&model.OrganizationMember{})

	tableName := _organizationMember.organizationMemberDo.TableName()
	_organizationMember.ALL = field.NewAsterisk(tableName)
	_organizationMember.ID = field.NewInt64(tableName, "id")
	_organizationMember.CreatedAt = field.NewTime(tableName, "created_at")
	_organizationMember.MemberID = field.NewString(tableName, "member_id")
	_organizationMember.MemberRole = field.NewString(tableName, "member_role")
	_organizationMember.OrganizationID = field.NewString(tableName, "organization_id")

	_organizationMember.fillFieldMap()

	return _organizationMember
}

type organizationMember struct {
	organizationMemberDo

	ALL            field.Asterisk
	ID             field.Int64
	CreatedAt      field.Time
	MemberID       field.String
	MemberRole     field.String
	OrganizationID field.String

	fieldMap map[string]field.Expr
}

func (o organizationMember) Table(newTableName string) *organizationMember {
	o.organizationMemberDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o organizationMember) As(alias string) *organizationMember {
	o.organizationMemberDo.DO = *(o.organizationMemberDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *organizationMember) updateTableName(table string) *organizationMember {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.MemberID = field.NewString(table, "member_id")
	o.MemberRole = field.NewString(table, "member_role")
	o.OrganizationID = field.NewString(table, "organization_id")

	o.fillFieldMap()

	return o
}

func (o *organizationMember) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *organizationMember) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 5)
	o.fieldMap["id"] = o.ID
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["member_id"] = o.MemberID
	o.fieldMap["member_role"] = o.MemberRole
	o.fieldMap["organization_id"] = o.OrganizationID
}

func (o organizationMember) clone(db *gorm.DB) organizationMember {
	o.organizationMemberDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o organizationMember) replaceDB(db *gorm.DB) organizationMember {
	o.organizationMemberDo.ReplaceDB(db)
	return o
}

type organizationMemberDo struct{ gen.DO }

type IOrganizationMemberDo interface {
	gen.SubQuery
	Debug() IOrganizationMemberDo
	WithContext(ctx context.Context) IOrganizationMemberDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOrganizationMemberDo
	WriteDB() IOrganizationMemberDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOrganizationMemberDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOrganizationMemberDo
	Not(conds ...gen.Condition) IOrganizationMemberDo
	Or(conds ...gen.Condition) IOrganizationMemberDo
	Select(conds ...field.Expr) IOrganizationMemberDo
	Where(conds ...gen.Condition) IOrganizationMemberDo
	Order(conds ...field.Expr) IOrganizationMemberDo
	Distinct(cols ...field.Expr) IOrganizationMemberDo
	Omit(cols ...field.Expr) IOrganizationMemberDo
	Join(table schema.Tabler, on ...field.Expr) IOrganizationMemberDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOrganizationMemberDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOrganizationMemberDo
	Group(cols ...field.Expr) IOrganizationMemberDo
	Having(conds ...gen.Condition) IOrganizationMemberDo
	Limit(limit int) IOrganizationMemberDo
	Offset(offset int) IOrganizationMemberDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOrganizationMemberDo
	Unscoped() IOrganizationMemberDo
	Create(values ...*model.OrganizationMember) error
	CreateInBatches(values []*model.OrganizationMember, batchSize int) error
	Save(values ...*model.OrganizationMember) error
	First() (*model.OrganizationMember, error)
	Take() (*model.OrganizationMember, error)
	Last() (*model.OrganizationMember, error)
	Find() ([]*model.OrganizationMember, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrganizationMember, err error)
	FindInBatches(result *[]*model.OrganizationMember, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OrganizationMember) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOrganizationMemberDo
	Assign(attrs ...field.AssignExpr) IOrganizationMemberDo
	Joins(fields ...field.RelationField) IOrganizationMemberDo
	Preload(fields ...field.RelationField) IOrganizationMemberDo
	FirstOrInit() (*model.OrganizationMember, error)
	FirstOrCreate() (*model.OrganizationMember, error)
	FindByPage(offset int, limit int) (result []*model.OrganizationMember, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOrganizationMemberDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o organizationMemberDo) Debug() IOrganizationMemberDo {
	return o.withDO(o.DO.Debug())
}

func (o organizationMemberDo) WithContext(ctx context.Context) IOrganizationMemberDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o organizationMemberDo) ReadDB() IOrganizationMemberDo {
	return o.Clauses(dbresolver.Read)
}

func (o organizationMemberDo) WriteDB() IOrganizationMemberDo {
	return o.Clauses(dbresolver.Write)
}

func (o organizationMemberDo) Session(config *gorm.Session) IOrganizationMemberDo {
	return o.withDO(o.DO.Session(config))
}

func (o organizationMemberDo) Clauses(conds ...clause.Expression) IOrganizationMemberDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o organizationMemberDo) Returning(value interface{}, columns ...string) IOrganizationMemberDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o organizationMemberDo) Not(conds ...gen.Condition) IOrganizationMemberDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o organizationMemberDo) Or(conds ...gen.Condition) IOrganizationMemberDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o organizationMemberDo) Select(conds ...field.Expr) IOrganizationMemberDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o organizationMemberDo) Where(conds ...gen.Condition) IOrganizationMemberDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o organizationMemberDo) Order(conds ...field.Expr) IOrganizationMemberDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o organizationMemberDo) Distinct(cols ...field.Expr) IOrganizationMemberDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o organizationMemberDo) Omit(cols ...field.Expr) IOrganizationMemberDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o organizationMemberDo) Join(table schema.Tabler, on ...field.Expr) IOrganizationMemberDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o organizationMemberDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOrganizationMemberDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o organizationMemberDo) RightJoin(table schema.Tabler, on ...field.Expr) IOrganizationMemberDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o organizationMemberDo) Group(cols ...field.Expr) IOrganizationMemberDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o organizationMemberDo) Having(conds ...gen.Condition) IOrganizationMemberDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o organizationMemberDo) Limit(limit int) IOrganizationMemberDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o organizationMemberDo) Offset(offset int) IOrganizationMemberDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o organizationMemberDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOrganizationMemberDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o organizationMemberDo) Unscoped() IOrganizationMemberDo {
	return o.withDO(o.DO.Unscoped())
}

func (o organizationMemberDo) Create(values ...*model.OrganizationMember) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o organizationMemberDo) CreateInBatches(values []*model.OrganizationMember, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o organizationMemberDo) Save(values ...*model.OrganizationMember) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o organizationMemberDo) First() (*model.OrganizationMember, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrganizationMember), nil
	}
}

func (o organizationMemberDo) Take() (*model.OrganizationMember, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrganizationMember), nil
	}
}

func (o organizationMemberDo) Last() (*model.OrganizationMember, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrganizationMember), nil
	}
}

func (o organizationMemberDo) Find() ([]*model.OrganizationMember, error) {
	result, err := o.DO.Find()
	return result.([]*model.OrganizationMember), err
}

func (o organizationMemberDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrganizationMember, err error) {
	buf := make([]*model.OrganizationMember, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o organizationMemberDo) FindInBatches(result *[]*model.OrganizationMember, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o organizationMemberDo) Attrs(attrs ...field.AssignExpr) IOrganizationMemberDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o organizationMemberDo) Assign(attrs ...field.AssignExpr) IOrganizationMemberDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o organizationMemberDo) Joins(fields ...field.RelationField) IOrganizationMemberDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o organizationMemberDo) Preload(fields ...field.RelationField) IOrganizationMemberDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o organizationMemberDo) FirstOrInit() (*model.OrganizationMember, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrganizationMember), nil
	}
}

func (o organizationMemberDo) FirstOrCreate() (*model.OrganizationMember, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrganizationMember), nil
	}
}

func (o organizationMemberDo) FindByPage(offset int, limit int) (result []*model.OrganizationMember, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o organizationMemberDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o organizationMemberDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o organizationMemberDo) Delete(models ...*model.OrganizationMember) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *organizationMemberDo) withDO(do gen.Dao) *organizationMemberDo {
	o.DO = *do.(*gen.DO)
	return o
}
