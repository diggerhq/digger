// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models_generated

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/diggerhq/digger/next/model"
)

func newInternalBlogAuthorPost(db *gorm.DB, opts ...gen.DOOption) internalBlogAuthorPost {
	_internalBlogAuthorPost := internalBlogAuthorPost{}

	_internalBlogAuthorPost.internalBlogAuthorPostDo.UseDB(db, opts...)
	_internalBlogAuthorPost.internalBlogAuthorPostDo.UseModel(&model.InternalBlogAuthorPost{})

	tableName := _internalBlogAuthorPost.internalBlogAuthorPostDo.TableName()
	_internalBlogAuthorPost.ALL = field.NewAsterisk(tableName)
	_internalBlogAuthorPost.AuthorID = field.NewString(tableName, "author_id")
	_internalBlogAuthorPost.PostID = field.NewString(tableName, "post_id")

	_internalBlogAuthorPost.fillFieldMap()

	return _internalBlogAuthorPost
}

type internalBlogAuthorPost struct {
	internalBlogAuthorPostDo

	ALL      field.Asterisk
	AuthorID field.String
	PostID   field.String

	fieldMap map[string]field.Expr
}

func (i internalBlogAuthorPost) Table(newTableName string) *internalBlogAuthorPost {
	i.internalBlogAuthorPostDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i internalBlogAuthorPost) As(alias string) *internalBlogAuthorPost {
	i.internalBlogAuthorPostDo.DO = *(i.internalBlogAuthorPostDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *internalBlogAuthorPost) updateTableName(table string) *internalBlogAuthorPost {
	i.ALL = field.NewAsterisk(table)
	i.AuthorID = field.NewString(table, "author_id")
	i.PostID = field.NewString(table, "post_id")

	i.fillFieldMap()

	return i
}

func (i *internalBlogAuthorPost) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *internalBlogAuthorPost) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 2)
	i.fieldMap["author_id"] = i.AuthorID
	i.fieldMap["post_id"] = i.PostID
}

func (i internalBlogAuthorPost) clone(db *gorm.DB) internalBlogAuthorPost {
	i.internalBlogAuthorPostDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i internalBlogAuthorPost) replaceDB(db *gorm.DB) internalBlogAuthorPost {
	i.internalBlogAuthorPostDo.ReplaceDB(db)
	return i
}

type internalBlogAuthorPostDo struct{ gen.DO }

type IInternalBlogAuthorPostDo interface {
	gen.SubQuery
	Debug() IInternalBlogAuthorPostDo
	WithContext(ctx context.Context) IInternalBlogAuthorPostDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IInternalBlogAuthorPostDo
	WriteDB() IInternalBlogAuthorPostDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IInternalBlogAuthorPostDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IInternalBlogAuthorPostDo
	Not(conds ...gen.Condition) IInternalBlogAuthorPostDo
	Or(conds ...gen.Condition) IInternalBlogAuthorPostDo
	Select(conds ...field.Expr) IInternalBlogAuthorPostDo
	Where(conds ...gen.Condition) IInternalBlogAuthorPostDo
	Order(conds ...field.Expr) IInternalBlogAuthorPostDo
	Distinct(cols ...field.Expr) IInternalBlogAuthorPostDo
	Omit(cols ...field.Expr) IInternalBlogAuthorPostDo
	Join(table schema.Tabler, on ...field.Expr) IInternalBlogAuthorPostDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IInternalBlogAuthorPostDo
	RightJoin(table schema.Tabler, on ...field.Expr) IInternalBlogAuthorPostDo
	Group(cols ...field.Expr) IInternalBlogAuthorPostDo
	Having(conds ...gen.Condition) IInternalBlogAuthorPostDo
	Limit(limit int) IInternalBlogAuthorPostDo
	Offset(offset int) IInternalBlogAuthorPostDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IInternalBlogAuthorPostDo
	Unscoped() IInternalBlogAuthorPostDo
	Create(values ...*model.InternalBlogAuthorPost) error
	CreateInBatches(values []*model.InternalBlogAuthorPost, batchSize int) error
	Save(values ...*model.InternalBlogAuthorPost) error
	First() (*model.InternalBlogAuthorPost, error)
	Take() (*model.InternalBlogAuthorPost, error)
	Last() (*model.InternalBlogAuthorPost, error)
	Find() ([]*model.InternalBlogAuthorPost, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.InternalBlogAuthorPost, err error)
	FindInBatches(result *[]*model.InternalBlogAuthorPost, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.InternalBlogAuthorPost) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IInternalBlogAuthorPostDo
	Assign(attrs ...field.AssignExpr) IInternalBlogAuthorPostDo
	Joins(fields ...field.RelationField) IInternalBlogAuthorPostDo
	Preload(fields ...field.RelationField) IInternalBlogAuthorPostDo
	FirstOrInit() (*model.InternalBlogAuthorPost, error)
	FirstOrCreate() (*model.InternalBlogAuthorPost, error)
	FindByPage(offset int, limit int) (result []*model.InternalBlogAuthorPost, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IInternalBlogAuthorPostDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i internalBlogAuthorPostDo) Debug() IInternalBlogAuthorPostDo {
	return i.withDO(i.DO.Debug())
}

func (i internalBlogAuthorPostDo) WithContext(ctx context.Context) IInternalBlogAuthorPostDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i internalBlogAuthorPostDo) ReadDB() IInternalBlogAuthorPostDo {
	return i.Clauses(dbresolver.Read)
}

func (i internalBlogAuthorPostDo) WriteDB() IInternalBlogAuthorPostDo {
	return i.Clauses(dbresolver.Write)
}

func (i internalBlogAuthorPostDo) Session(config *gorm.Session) IInternalBlogAuthorPostDo {
	return i.withDO(i.DO.Session(config))
}

func (i internalBlogAuthorPostDo) Clauses(conds ...clause.Expression) IInternalBlogAuthorPostDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i internalBlogAuthorPostDo) Returning(value interface{}, columns ...string) IInternalBlogAuthorPostDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i internalBlogAuthorPostDo) Not(conds ...gen.Condition) IInternalBlogAuthorPostDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i internalBlogAuthorPostDo) Or(conds ...gen.Condition) IInternalBlogAuthorPostDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i internalBlogAuthorPostDo) Select(conds ...field.Expr) IInternalBlogAuthorPostDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i internalBlogAuthorPostDo) Where(conds ...gen.Condition) IInternalBlogAuthorPostDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i internalBlogAuthorPostDo) Order(conds ...field.Expr) IInternalBlogAuthorPostDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i internalBlogAuthorPostDo) Distinct(cols ...field.Expr) IInternalBlogAuthorPostDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i internalBlogAuthorPostDo) Omit(cols ...field.Expr) IInternalBlogAuthorPostDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i internalBlogAuthorPostDo) Join(table schema.Tabler, on ...field.Expr) IInternalBlogAuthorPostDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i internalBlogAuthorPostDo) LeftJoin(table schema.Tabler, on ...field.Expr) IInternalBlogAuthorPostDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i internalBlogAuthorPostDo) RightJoin(table schema.Tabler, on ...field.Expr) IInternalBlogAuthorPostDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i internalBlogAuthorPostDo) Group(cols ...field.Expr) IInternalBlogAuthorPostDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i internalBlogAuthorPostDo) Having(conds ...gen.Condition) IInternalBlogAuthorPostDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i internalBlogAuthorPostDo) Limit(limit int) IInternalBlogAuthorPostDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i internalBlogAuthorPostDo) Offset(offset int) IInternalBlogAuthorPostDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i internalBlogAuthorPostDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IInternalBlogAuthorPostDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i internalBlogAuthorPostDo) Unscoped() IInternalBlogAuthorPostDo {
	return i.withDO(i.DO.Unscoped())
}

func (i internalBlogAuthorPostDo) Create(values ...*model.InternalBlogAuthorPost) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i internalBlogAuthorPostDo) CreateInBatches(values []*model.InternalBlogAuthorPost, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i internalBlogAuthorPostDo) Save(values ...*model.InternalBlogAuthorPost) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i internalBlogAuthorPostDo) First() (*model.InternalBlogAuthorPost, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.InternalBlogAuthorPost), nil
	}
}

func (i internalBlogAuthorPostDo) Take() (*model.InternalBlogAuthorPost, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.InternalBlogAuthorPost), nil
	}
}

func (i internalBlogAuthorPostDo) Last() (*model.InternalBlogAuthorPost, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.InternalBlogAuthorPost), nil
	}
}

func (i internalBlogAuthorPostDo) Find() ([]*model.InternalBlogAuthorPost, error) {
	result, err := i.DO.Find()
	return result.([]*model.InternalBlogAuthorPost), err
}

func (i internalBlogAuthorPostDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.InternalBlogAuthorPost, err error) {
	buf := make([]*model.InternalBlogAuthorPost, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i internalBlogAuthorPostDo) FindInBatches(result *[]*model.InternalBlogAuthorPost, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i internalBlogAuthorPostDo) Attrs(attrs ...field.AssignExpr) IInternalBlogAuthorPostDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i internalBlogAuthorPostDo) Assign(attrs ...field.AssignExpr) IInternalBlogAuthorPostDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i internalBlogAuthorPostDo) Joins(fields ...field.RelationField) IInternalBlogAuthorPostDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i internalBlogAuthorPostDo) Preload(fields ...field.RelationField) IInternalBlogAuthorPostDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i internalBlogAuthorPostDo) FirstOrInit() (*model.InternalBlogAuthorPost, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.InternalBlogAuthorPost), nil
	}
}

func (i internalBlogAuthorPostDo) FirstOrCreate() (*model.InternalBlogAuthorPost, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.InternalBlogAuthorPost), nil
	}
}

func (i internalBlogAuthorPostDo) FindByPage(offset int, limit int) (result []*model.InternalBlogAuthorPost, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i internalBlogAuthorPostDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i internalBlogAuthorPostDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i internalBlogAuthorPostDo) Delete(models ...*model.InternalBlogAuthorPost) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *internalBlogAuthorPostDo) withDO(do gen.Dao) *internalBlogAuthorPostDo {
	i.DO = *do.(*gen.DO)
	return i
}
