// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models_generated

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/diggerhq/digger/next/model"
)

func newUserNotification(db *gorm.DB, opts ...gen.DOOption) userNotification {
	_userNotification := userNotification{}

	_userNotification.userNotificationDo.UseDB(db, opts...)
	_userNotification.userNotificationDo.UseModel(&model.UserNotification{})

	tableName := _userNotification.userNotificationDo.TableName()
	_userNotification.ALL = field.NewAsterisk(tableName)
	_userNotification.ID = field.NewString(tableName, "id")
	_userNotification.UserID = field.NewString(tableName, "user_id")
	_userNotification.IsRead = field.NewBool(tableName, "is_read")
	_userNotification.IsSeen = field.NewBool(tableName, "is_seen")
	_userNotification.Payload = field.NewString(tableName, "payload")
	_userNotification.CreatedAt = field.NewTime(tableName, "created_at")
	_userNotification.UpdatedAt = field.NewTime(tableName, "updated_at")

	_userNotification.fillFieldMap()

	return _userNotification
}

type userNotification struct {
	userNotificationDo

	ALL       field.Asterisk
	ID        field.String
	UserID    field.String
	IsRead    field.Bool
	IsSeen    field.Bool
	Payload   field.String
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (u userNotification) Table(newTableName string) *userNotification {
	u.userNotificationDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userNotification) As(alias string) *userNotification {
	u.userNotificationDo.DO = *(u.userNotificationDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userNotification) updateTableName(table string) *userNotification {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewString(table, "id")
	u.UserID = field.NewString(table, "user_id")
	u.IsRead = field.NewBool(table, "is_read")
	u.IsSeen = field.NewBool(table, "is_seen")
	u.Payload = field.NewString(table, "payload")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userNotification) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userNotification) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 7)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["is_read"] = u.IsRead
	u.fieldMap["is_seen"] = u.IsSeen
	u.fieldMap["payload"] = u.Payload
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userNotification) clone(db *gorm.DB) userNotification {
	u.userNotificationDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userNotification) replaceDB(db *gorm.DB) userNotification {
	u.userNotificationDo.ReplaceDB(db)
	return u
}

type userNotificationDo struct{ gen.DO }

type IUserNotificationDo interface {
	gen.SubQuery
	Debug() IUserNotificationDo
	WithContext(ctx context.Context) IUserNotificationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserNotificationDo
	WriteDB() IUserNotificationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserNotificationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserNotificationDo
	Not(conds ...gen.Condition) IUserNotificationDo
	Or(conds ...gen.Condition) IUserNotificationDo
	Select(conds ...field.Expr) IUserNotificationDo
	Where(conds ...gen.Condition) IUserNotificationDo
	Order(conds ...field.Expr) IUserNotificationDo
	Distinct(cols ...field.Expr) IUserNotificationDo
	Omit(cols ...field.Expr) IUserNotificationDo
	Join(table schema.Tabler, on ...field.Expr) IUserNotificationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserNotificationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserNotificationDo
	Group(cols ...field.Expr) IUserNotificationDo
	Having(conds ...gen.Condition) IUserNotificationDo
	Limit(limit int) IUserNotificationDo
	Offset(offset int) IUserNotificationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserNotificationDo
	Unscoped() IUserNotificationDo
	Create(values ...*model.UserNotification) error
	CreateInBatches(values []*model.UserNotification, batchSize int) error
	Save(values ...*model.UserNotification) error
	First() (*model.UserNotification, error)
	Take() (*model.UserNotification, error)
	Last() (*model.UserNotification, error)
	Find() ([]*model.UserNotification, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserNotification, err error)
	FindInBatches(result *[]*model.UserNotification, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserNotification) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserNotificationDo
	Assign(attrs ...field.AssignExpr) IUserNotificationDo
	Joins(fields ...field.RelationField) IUserNotificationDo
	Preload(fields ...field.RelationField) IUserNotificationDo
	FirstOrInit() (*model.UserNotification, error)
	FirstOrCreate() (*model.UserNotification, error)
	FindByPage(offset int, limit int) (result []*model.UserNotification, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserNotificationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userNotificationDo) Debug() IUserNotificationDo {
	return u.withDO(u.DO.Debug())
}

func (u userNotificationDo) WithContext(ctx context.Context) IUserNotificationDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userNotificationDo) ReadDB() IUserNotificationDo {
	return u.Clauses(dbresolver.Read)
}

func (u userNotificationDo) WriteDB() IUserNotificationDo {
	return u.Clauses(dbresolver.Write)
}

func (u userNotificationDo) Session(config *gorm.Session) IUserNotificationDo {
	return u.withDO(u.DO.Session(config))
}

func (u userNotificationDo) Clauses(conds ...clause.Expression) IUserNotificationDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userNotificationDo) Returning(value interface{}, columns ...string) IUserNotificationDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userNotificationDo) Not(conds ...gen.Condition) IUserNotificationDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userNotificationDo) Or(conds ...gen.Condition) IUserNotificationDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userNotificationDo) Select(conds ...field.Expr) IUserNotificationDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userNotificationDo) Where(conds ...gen.Condition) IUserNotificationDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userNotificationDo) Order(conds ...field.Expr) IUserNotificationDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userNotificationDo) Distinct(cols ...field.Expr) IUserNotificationDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userNotificationDo) Omit(cols ...field.Expr) IUserNotificationDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userNotificationDo) Join(table schema.Tabler, on ...field.Expr) IUserNotificationDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userNotificationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserNotificationDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userNotificationDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserNotificationDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userNotificationDo) Group(cols ...field.Expr) IUserNotificationDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userNotificationDo) Having(conds ...gen.Condition) IUserNotificationDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userNotificationDo) Limit(limit int) IUserNotificationDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userNotificationDo) Offset(offset int) IUserNotificationDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userNotificationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserNotificationDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userNotificationDo) Unscoped() IUserNotificationDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userNotificationDo) Create(values ...*model.UserNotification) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userNotificationDo) CreateInBatches(values []*model.UserNotification, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userNotificationDo) Save(values ...*model.UserNotification) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userNotificationDo) First() (*model.UserNotification, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserNotification), nil
	}
}

func (u userNotificationDo) Take() (*model.UserNotification, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserNotification), nil
	}
}

func (u userNotificationDo) Last() (*model.UserNotification, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserNotification), nil
	}
}

func (u userNotificationDo) Find() ([]*model.UserNotification, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserNotification), err
}

func (u userNotificationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserNotification, err error) {
	buf := make([]*model.UserNotification, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userNotificationDo) FindInBatches(result *[]*model.UserNotification, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userNotificationDo) Attrs(attrs ...field.AssignExpr) IUserNotificationDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userNotificationDo) Assign(attrs ...field.AssignExpr) IUserNotificationDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userNotificationDo) Joins(fields ...field.RelationField) IUserNotificationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userNotificationDo) Preload(fields ...field.RelationField) IUserNotificationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userNotificationDo) FirstOrInit() (*model.UserNotification, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserNotification), nil
	}
}

func (u userNotificationDo) FirstOrCreate() (*model.UserNotification, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserNotification), nil
	}
}

func (u userNotificationDo) FindByPage(offset int, limit int) (result []*model.UserNotification, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userNotificationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userNotificationDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userNotificationDo) Delete(models ...*model.UserNotification) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userNotificationDo) withDO(do gen.Dao) *userNotificationDo {
	u.DO = *do.(*gen.DO)
	return u
}
