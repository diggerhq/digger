// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models_generated

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/diggerhq/digger/next/model"
)

func newEncryptedEnvVar(db *gorm.DB, opts ...gen.DOOption) encryptedEnvVar {
	_encryptedEnvVar := encryptedEnvVar{}

	_encryptedEnvVar.encryptedEnvVarDo.UseDB(db, opts...)
	_encryptedEnvVar.encryptedEnvVarDo.UseModel(&model.EncryptedEnvVar{})

	tableName := _encryptedEnvVar.encryptedEnvVarDo.TableName()
	_encryptedEnvVar.ALL = field.NewAsterisk(tableName)
	_encryptedEnvVar.ID = field.NewString(tableName, "id")
	_encryptedEnvVar.ProjectID = field.NewString(tableName, "project_id")
	_encryptedEnvVar.Name = field.NewString(tableName, "name")
	_encryptedEnvVar.EncryptedValue = field.NewString(tableName, "encrypted_value")
	_encryptedEnvVar.UpdatedAt = field.NewTime(tableName, "updated_at")
	_encryptedEnvVar.IsSecret = field.NewBool(tableName, "is_secret")

	_encryptedEnvVar.fillFieldMap()

	return _encryptedEnvVar
}

type encryptedEnvVar struct {
	encryptedEnvVarDo

	ALL            field.Asterisk
	ID             field.String
	ProjectID      field.String
	Name           field.String
	EncryptedValue field.String
	UpdatedAt      field.Time
	IsSecret       field.Bool

	fieldMap map[string]field.Expr
}

func (e encryptedEnvVar) Table(newTableName string) *encryptedEnvVar {
	e.encryptedEnvVarDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e encryptedEnvVar) As(alias string) *encryptedEnvVar {
	e.encryptedEnvVarDo.DO = *(e.encryptedEnvVarDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *encryptedEnvVar) updateTableName(table string) *encryptedEnvVar {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewString(table, "id")
	e.ProjectID = field.NewString(table, "project_id")
	e.Name = field.NewString(table, "name")
	e.EncryptedValue = field.NewString(table, "encrypted_value")
	e.UpdatedAt = field.NewTime(table, "updated_at")
	e.IsSecret = field.NewBool(table, "is_secret")

	e.fillFieldMap()

	return e
}

func (e *encryptedEnvVar) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *encryptedEnvVar) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 6)
	e.fieldMap["id"] = e.ID
	e.fieldMap["project_id"] = e.ProjectID
	e.fieldMap["name"] = e.Name
	e.fieldMap["encrypted_value"] = e.EncryptedValue
	e.fieldMap["updated_at"] = e.UpdatedAt
	e.fieldMap["is_secret"] = e.IsSecret
}

func (e encryptedEnvVar) clone(db *gorm.DB) encryptedEnvVar {
	e.encryptedEnvVarDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e encryptedEnvVar) replaceDB(db *gorm.DB) encryptedEnvVar {
	e.encryptedEnvVarDo.ReplaceDB(db)
	return e
}

type encryptedEnvVarDo struct{ gen.DO }

type IEncryptedEnvVarDo interface {
	gen.SubQuery
	Debug() IEncryptedEnvVarDo
	WithContext(ctx context.Context) IEncryptedEnvVarDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEncryptedEnvVarDo
	WriteDB() IEncryptedEnvVarDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEncryptedEnvVarDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEncryptedEnvVarDo
	Not(conds ...gen.Condition) IEncryptedEnvVarDo
	Or(conds ...gen.Condition) IEncryptedEnvVarDo
	Select(conds ...field.Expr) IEncryptedEnvVarDo
	Where(conds ...gen.Condition) IEncryptedEnvVarDo
	Order(conds ...field.Expr) IEncryptedEnvVarDo
	Distinct(cols ...field.Expr) IEncryptedEnvVarDo
	Omit(cols ...field.Expr) IEncryptedEnvVarDo
	Join(table schema.Tabler, on ...field.Expr) IEncryptedEnvVarDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEncryptedEnvVarDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEncryptedEnvVarDo
	Group(cols ...field.Expr) IEncryptedEnvVarDo
	Having(conds ...gen.Condition) IEncryptedEnvVarDo
	Limit(limit int) IEncryptedEnvVarDo
	Offset(offset int) IEncryptedEnvVarDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEncryptedEnvVarDo
	Unscoped() IEncryptedEnvVarDo
	Create(values ...*model.EncryptedEnvVar) error
	CreateInBatches(values []*model.EncryptedEnvVar, batchSize int) error
	Save(values ...*model.EncryptedEnvVar) error
	First() (*model.EncryptedEnvVar, error)
	Take() (*model.EncryptedEnvVar, error)
	Last() (*model.EncryptedEnvVar, error)
	Find() ([]*model.EncryptedEnvVar, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EncryptedEnvVar, err error)
	FindInBatches(result *[]*model.EncryptedEnvVar, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EncryptedEnvVar) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEncryptedEnvVarDo
	Assign(attrs ...field.AssignExpr) IEncryptedEnvVarDo
	Joins(fields ...field.RelationField) IEncryptedEnvVarDo
	Preload(fields ...field.RelationField) IEncryptedEnvVarDo
	FirstOrInit() (*model.EncryptedEnvVar, error)
	FirstOrCreate() (*model.EncryptedEnvVar, error)
	FindByPage(offset int, limit int) (result []*model.EncryptedEnvVar, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEncryptedEnvVarDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e encryptedEnvVarDo) Debug() IEncryptedEnvVarDo {
	return e.withDO(e.DO.Debug())
}

func (e encryptedEnvVarDo) WithContext(ctx context.Context) IEncryptedEnvVarDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e encryptedEnvVarDo) ReadDB() IEncryptedEnvVarDo {
	return e.Clauses(dbresolver.Read)
}

func (e encryptedEnvVarDo) WriteDB() IEncryptedEnvVarDo {
	return e.Clauses(dbresolver.Write)
}

func (e encryptedEnvVarDo) Session(config *gorm.Session) IEncryptedEnvVarDo {
	return e.withDO(e.DO.Session(config))
}

func (e encryptedEnvVarDo) Clauses(conds ...clause.Expression) IEncryptedEnvVarDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e encryptedEnvVarDo) Returning(value interface{}, columns ...string) IEncryptedEnvVarDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e encryptedEnvVarDo) Not(conds ...gen.Condition) IEncryptedEnvVarDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e encryptedEnvVarDo) Or(conds ...gen.Condition) IEncryptedEnvVarDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e encryptedEnvVarDo) Select(conds ...field.Expr) IEncryptedEnvVarDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e encryptedEnvVarDo) Where(conds ...gen.Condition) IEncryptedEnvVarDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e encryptedEnvVarDo) Order(conds ...field.Expr) IEncryptedEnvVarDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e encryptedEnvVarDo) Distinct(cols ...field.Expr) IEncryptedEnvVarDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e encryptedEnvVarDo) Omit(cols ...field.Expr) IEncryptedEnvVarDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e encryptedEnvVarDo) Join(table schema.Tabler, on ...field.Expr) IEncryptedEnvVarDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e encryptedEnvVarDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEncryptedEnvVarDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e encryptedEnvVarDo) RightJoin(table schema.Tabler, on ...field.Expr) IEncryptedEnvVarDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e encryptedEnvVarDo) Group(cols ...field.Expr) IEncryptedEnvVarDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e encryptedEnvVarDo) Having(conds ...gen.Condition) IEncryptedEnvVarDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e encryptedEnvVarDo) Limit(limit int) IEncryptedEnvVarDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e encryptedEnvVarDo) Offset(offset int) IEncryptedEnvVarDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e encryptedEnvVarDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEncryptedEnvVarDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e encryptedEnvVarDo) Unscoped() IEncryptedEnvVarDo {
	return e.withDO(e.DO.Unscoped())
}

func (e encryptedEnvVarDo) Create(values ...*model.EncryptedEnvVar) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e encryptedEnvVarDo) CreateInBatches(values []*model.EncryptedEnvVar, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e encryptedEnvVarDo) Save(values ...*model.EncryptedEnvVar) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e encryptedEnvVarDo) First() (*model.EncryptedEnvVar, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EncryptedEnvVar), nil
	}
}

func (e encryptedEnvVarDo) Take() (*model.EncryptedEnvVar, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EncryptedEnvVar), nil
	}
}

func (e encryptedEnvVarDo) Last() (*model.EncryptedEnvVar, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EncryptedEnvVar), nil
	}
}

func (e encryptedEnvVarDo) Find() ([]*model.EncryptedEnvVar, error) {
	result, err := e.DO.Find()
	return result.([]*model.EncryptedEnvVar), err
}

func (e encryptedEnvVarDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EncryptedEnvVar, err error) {
	buf := make([]*model.EncryptedEnvVar, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e encryptedEnvVarDo) FindInBatches(result *[]*model.EncryptedEnvVar, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e encryptedEnvVarDo) Attrs(attrs ...field.AssignExpr) IEncryptedEnvVarDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e encryptedEnvVarDo) Assign(attrs ...field.AssignExpr) IEncryptedEnvVarDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e encryptedEnvVarDo) Joins(fields ...field.RelationField) IEncryptedEnvVarDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e encryptedEnvVarDo) Preload(fields ...field.RelationField) IEncryptedEnvVarDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e encryptedEnvVarDo) FirstOrInit() (*model.EncryptedEnvVar, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EncryptedEnvVar), nil
	}
}

func (e encryptedEnvVarDo) FirstOrCreate() (*model.EncryptedEnvVar, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EncryptedEnvVar), nil
	}
}

func (e encryptedEnvVarDo) FindByPage(offset int, limit int) (result []*model.EncryptedEnvVar, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e encryptedEnvVarDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e encryptedEnvVarDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e encryptedEnvVarDo) Delete(models ...*model.EncryptedEnvVar) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *encryptedEnvVarDo) withDO(do gen.Dao) *encryptedEnvVarDo {
	e.DO = *do.(*gen.DO)
	return e
}
