// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models_generated

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/diggerhq/digger/next/model"
)

func newDiggerLock(db *gorm.DB, opts ...gen.DOOption) diggerLock {
	_diggerLock := diggerLock{}

	_diggerLock.diggerLockDo.UseDB(db, opts...)
	_diggerLock.diggerLockDo.UseModel(&model.DiggerLock{})

	tableName := _diggerLock.diggerLockDo.TableName()
	_diggerLock.ALL = field.NewAsterisk(tableName)
	_diggerLock.ID = field.NewString(tableName, "id")
	_diggerLock.CreatedAt = field.NewTime(tableName, "created_at")
	_diggerLock.UpdatedAt = field.NewTime(tableName, "updated_at")
	_diggerLock.DeletedAt = field.NewField(tableName, "deleted_at")
	_diggerLock.Resource = field.NewString(tableName, "resource")
	_diggerLock.LockID = field.NewInt64(tableName, "lock_id")
	_diggerLock.OrganizationID = field.NewString(tableName, "organization_id")

	_diggerLock.fillFieldMap()

	return _diggerLock
}

type diggerLock struct {
	diggerLockDo

	ALL            field.Asterisk
	ID             field.String
	CreatedAt      field.Time
	UpdatedAt      field.Time
	DeletedAt      field.Field
	Resource       field.String
	LockID         field.Int64
	OrganizationID field.String

	fieldMap map[string]field.Expr
}

func (d diggerLock) Table(newTableName string) *diggerLock {
	d.diggerLockDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d diggerLock) As(alias string) *diggerLock {
	d.diggerLockDo.DO = *(d.diggerLockDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *diggerLock) updateTableName(table string) *diggerLock {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewString(table, "id")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.DeletedAt = field.NewField(table, "deleted_at")
	d.Resource = field.NewString(table, "resource")
	d.LockID = field.NewInt64(table, "lock_id")
	d.OrganizationID = field.NewString(table, "organization_id")

	d.fillFieldMap()

	return d
}

func (d *diggerLock) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *diggerLock) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 7)
	d.fieldMap["id"] = d.ID
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["deleted_at"] = d.DeletedAt
	d.fieldMap["resource"] = d.Resource
	d.fieldMap["lock_id"] = d.LockID
	d.fieldMap["organization_id"] = d.OrganizationID
}

func (d diggerLock) clone(db *gorm.DB) diggerLock {
	d.diggerLockDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d diggerLock) replaceDB(db *gorm.DB) diggerLock {
	d.diggerLockDo.ReplaceDB(db)
	return d
}

type diggerLockDo struct{ gen.DO }

type IDiggerLockDo interface {
	gen.SubQuery
	Debug() IDiggerLockDo
	WithContext(ctx context.Context) IDiggerLockDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDiggerLockDo
	WriteDB() IDiggerLockDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDiggerLockDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDiggerLockDo
	Not(conds ...gen.Condition) IDiggerLockDo
	Or(conds ...gen.Condition) IDiggerLockDo
	Select(conds ...field.Expr) IDiggerLockDo
	Where(conds ...gen.Condition) IDiggerLockDo
	Order(conds ...field.Expr) IDiggerLockDo
	Distinct(cols ...field.Expr) IDiggerLockDo
	Omit(cols ...field.Expr) IDiggerLockDo
	Join(table schema.Tabler, on ...field.Expr) IDiggerLockDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDiggerLockDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDiggerLockDo
	Group(cols ...field.Expr) IDiggerLockDo
	Having(conds ...gen.Condition) IDiggerLockDo
	Limit(limit int) IDiggerLockDo
	Offset(offset int) IDiggerLockDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDiggerLockDo
	Unscoped() IDiggerLockDo
	Create(values ...*model.DiggerLock) error
	CreateInBatches(values []*model.DiggerLock, batchSize int) error
	Save(values ...*model.DiggerLock) error
	First() (*model.DiggerLock, error)
	Take() (*model.DiggerLock, error)
	Last() (*model.DiggerLock, error)
	Find() ([]*model.DiggerLock, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DiggerLock, err error)
	FindInBatches(result *[]*model.DiggerLock, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DiggerLock) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDiggerLockDo
	Assign(attrs ...field.AssignExpr) IDiggerLockDo
	Joins(fields ...field.RelationField) IDiggerLockDo
	Preload(fields ...field.RelationField) IDiggerLockDo
	FirstOrInit() (*model.DiggerLock, error)
	FirstOrCreate() (*model.DiggerLock, error)
	FindByPage(offset int, limit int) (result []*model.DiggerLock, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDiggerLockDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d diggerLockDo) Debug() IDiggerLockDo {
	return d.withDO(d.DO.Debug())
}

func (d diggerLockDo) WithContext(ctx context.Context) IDiggerLockDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d diggerLockDo) ReadDB() IDiggerLockDo {
	return d.Clauses(dbresolver.Read)
}

func (d diggerLockDo) WriteDB() IDiggerLockDo {
	return d.Clauses(dbresolver.Write)
}

func (d diggerLockDo) Session(config *gorm.Session) IDiggerLockDo {
	return d.withDO(d.DO.Session(config))
}

func (d diggerLockDo) Clauses(conds ...clause.Expression) IDiggerLockDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d diggerLockDo) Returning(value interface{}, columns ...string) IDiggerLockDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d diggerLockDo) Not(conds ...gen.Condition) IDiggerLockDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d diggerLockDo) Or(conds ...gen.Condition) IDiggerLockDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d diggerLockDo) Select(conds ...field.Expr) IDiggerLockDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d diggerLockDo) Where(conds ...gen.Condition) IDiggerLockDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d diggerLockDo) Order(conds ...field.Expr) IDiggerLockDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d diggerLockDo) Distinct(cols ...field.Expr) IDiggerLockDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d diggerLockDo) Omit(cols ...field.Expr) IDiggerLockDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d diggerLockDo) Join(table schema.Tabler, on ...field.Expr) IDiggerLockDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d diggerLockDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDiggerLockDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d diggerLockDo) RightJoin(table schema.Tabler, on ...field.Expr) IDiggerLockDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d diggerLockDo) Group(cols ...field.Expr) IDiggerLockDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d diggerLockDo) Having(conds ...gen.Condition) IDiggerLockDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d diggerLockDo) Limit(limit int) IDiggerLockDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d diggerLockDo) Offset(offset int) IDiggerLockDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d diggerLockDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDiggerLockDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d diggerLockDo) Unscoped() IDiggerLockDo {
	return d.withDO(d.DO.Unscoped())
}

func (d diggerLockDo) Create(values ...*model.DiggerLock) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d diggerLockDo) CreateInBatches(values []*model.DiggerLock, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d diggerLockDo) Save(values ...*model.DiggerLock) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d diggerLockDo) First() (*model.DiggerLock, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiggerLock), nil
	}
}

func (d diggerLockDo) Take() (*model.DiggerLock, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiggerLock), nil
	}
}

func (d diggerLockDo) Last() (*model.DiggerLock, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiggerLock), nil
	}
}

func (d diggerLockDo) Find() ([]*model.DiggerLock, error) {
	result, err := d.DO.Find()
	return result.([]*model.DiggerLock), err
}

func (d diggerLockDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DiggerLock, err error) {
	buf := make([]*model.DiggerLock, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d diggerLockDo) FindInBatches(result *[]*model.DiggerLock, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d diggerLockDo) Attrs(attrs ...field.AssignExpr) IDiggerLockDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d diggerLockDo) Assign(attrs ...field.AssignExpr) IDiggerLockDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d diggerLockDo) Joins(fields ...field.RelationField) IDiggerLockDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d diggerLockDo) Preload(fields ...field.RelationField) IDiggerLockDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d diggerLockDo) FirstOrInit() (*model.DiggerLock, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiggerLock), nil
	}
}

func (d diggerLockDo) FirstOrCreate() (*model.DiggerLock, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiggerLock), nil
	}
}

func (d diggerLockDo) FindByPage(offset int, limit int) (result []*model.DiggerLock, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d diggerLockDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d diggerLockDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d diggerLockDo) Delete(models ...*model.DiggerLock) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *diggerLockDo) withDO(do gen.Dao) *diggerLockDo {
	d.DO = *do.(*gen.DO)
	return d
}
