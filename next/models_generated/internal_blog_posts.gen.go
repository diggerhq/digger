// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models_generated

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/diggerhq/digger/next/model"
)

func newInternalBlogPost(db *gorm.DB, opts ...gen.DOOption) internalBlogPost {
	_internalBlogPost := internalBlogPost{}

	_internalBlogPost.internalBlogPostDo.UseDB(db, opts...)
	_internalBlogPost.internalBlogPostDo.UseModel(&model.InternalBlogPost{})

	tableName := _internalBlogPost.internalBlogPostDo.TableName()
	_internalBlogPost.ALL = field.NewAsterisk(tableName)
	_internalBlogPost.ID = field.NewString(tableName, "id")
	_internalBlogPost.Slug = field.NewString(tableName, "slug")
	_internalBlogPost.Title = field.NewString(tableName, "title")
	_internalBlogPost.Summary = field.NewString(tableName, "summary")
	_internalBlogPost.Content = field.NewString(tableName, "content")
	_internalBlogPost.CreatedAt = field.NewTime(tableName, "created_at")
	_internalBlogPost.UpdatedAt = field.NewTime(tableName, "updated_at")
	_internalBlogPost.IsFeatured = field.NewBool(tableName, "is_featured")
	_internalBlogPost.Status = field.NewString(tableName, "status")
	_internalBlogPost.CoverImage = field.NewString(tableName, "cover_image")
	_internalBlogPost.SeoData = field.NewString(tableName, "seo_data")
	_internalBlogPost.JSONContent = field.NewString(tableName, "json_content")

	_internalBlogPost.fillFieldMap()

	return _internalBlogPost
}

type internalBlogPost struct {
	internalBlogPostDo

	ALL         field.Asterisk
	ID          field.String
	Slug        field.String
	Title       field.String
	Summary     field.String
	Content     field.String
	CreatedAt   field.Time
	UpdatedAt   field.Time
	IsFeatured  field.Bool
	Status      field.String
	CoverImage  field.String
	SeoData     field.String
	JSONContent field.String

	fieldMap map[string]field.Expr
}

func (i internalBlogPost) Table(newTableName string) *internalBlogPost {
	i.internalBlogPostDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i internalBlogPost) As(alias string) *internalBlogPost {
	i.internalBlogPostDo.DO = *(i.internalBlogPostDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *internalBlogPost) updateTableName(table string) *internalBlogPost {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewString(table, "id")
	i.Slug = field.NewString(table, "slug")
	i.Title = field.NewString(table, "title")
	i.Summary = field.NewString(table, "summary")
	i.Content = field.NewString(table, "content")
	i.CreatedAt = field.NewTime(table, "created_at")
	i.UpdatedAt = field.NewTime(table, "updated_at")
	i.IsFeatured = field.NewBool(table, "is_featured")
	i.Status = field.NewString(table, "status")
	i.CoverImage = field.NewString(table, "cover_image")
	i.SeoData = field.NewString(table, "seo_data")
	i.JSONContent = field.NewString(table, "json_content")

	i.fillFieldMap()

	return i
}

func (i *internalBlogPost) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *internalBlogPost) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 12)
	i.fieldMap["id"] = i.ID
	i.fieldMap["slug"] = i.Slug
	i.fieldMap["title"] = i.Title
	i.fieldMap["summary"] = i.Summary
	i.fieldMap["content"] = i.Content
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["updated_at"] = i.UpdatedAt
	i.fieldMap["is_featured"] = i.IsFeatured
	i.fieldMap["status"] = i.Status
	i.fieldMap["cover_image"] = i.CoverImage
	i.fieldMap["seo_data"] = i.SeoData
	i.fieldMap["json_content"] = i.JSONContent
}

func (i internalBlogPost) clone(db *gorm.DB) internalBlogPost {
	i.internalBlogPostDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i internalBlogPost) replaceDB(db *gorm.DB) internalBlogPost {
	i.internalBlogPostDo.ReplaceDB(db)
	return i
}

type internalBlogPostDo struct{ gen.DO }

type IInternalBlogPostDo interface {
	gen.SubQuery
	Debug() IInternalBlogPostDo
	WithContext(ctx context.Context) IInternalBlogPostDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IInternalBlogPostDo
	WriteDB() IInternalBlogPostDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IInternalBlogPostDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IInternalBlogPostDo
	Not(conds ...gen.Condition) IInternalBlogPostDo
	Or(conds ...gen.Condition) IInternalBlogPostDo
	Select(conds ...field.Expr) IInternalBlogPostDo
	Where(conds ...gen.Condition) IInternalBlogPostDo
	Order(conds ...field.Expr) IInternalBlogPostDo
	Distinct(cols ...field.Expr) IInternalBlogPostDo
	Omit(cols ...field.Expr) IInternalBlogPostDo
	Join(table schema.Tabler, on ...field.Expr) IInternalBlogPostDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IInternalBlogPostDo
	RightJoin(table schema.Tabler, on ...field.Expr) IInternalBlogPostDo
	Group(cols ...field.Expr) IInternalBlogPostDo
	Having(conds ...gen.Condition) IInternalBlogPostDo
	Limit(limit int) IInternalBlogPostDo
	Offset(offset int) IInternalBlogPostDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IInternalBlogPostDo
	Unscoped() IInternalBlogPostDo
	Create(values ...*model.InternalBlogPost) error
	CreateInBatches(values []*model.InternalBlogPost, batchSize int) error
	Save(values ...*model.InternalBlogPost) error
	First() (*model.InternalBlogPost, error)
	Take() (*model.InternalBlogPost, error)
	Last() (*model.InternalBlogPost, error)
	Find() ([]*model.InternalBlogPost, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.InternalBlogPost, err error)
	FindInBatches(result *[]*model.InternalBlogPost, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.InternalBlogPost) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IInternalBlogPostDo
	Assign(attrs ...field.AssignExpr) IInternalBlogPostDo
	Joins(fields ...field.RelationField) IInternalBlogPostDo
	Preload(fields ...field.RelationField) IInternalBlogPostDo
	FirstOrInit() (*model.InternalBlogPost, error)
	FirstOrCreate() (*model.InternalBlogPost, error)
	FindByPage(offset int, limit int) (result []*model.InternalBlogPost, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IInternalBlogPostDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i internalBlogPostDo) Debug() IInternalBlogPostDo {
	return i.withDO(i.DO.Debug())
}

func (i internalBlogPostDo) WithContext(ctx context.Context) IInternalBlogPostDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i internalBlogPostDo) ReadDB() IInternalBlogPostDo {
	return i.Clauses(dbresolver.Read)
}

func (i internalBlogPostDo) WriteDB() IInternalBlogPostDo {
	return i.Clauses(dbresolver.Write)
}

func (i internalBlogPostDo) Session(config *gorm.Session) IInternalBlogPostDo {
	return i.withDO(i.DO.Session(config))
}

func (i internalBlogPostDo) Clauses(conds ...clause.Expression) IInternalBlogPostDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i internalBlogPostDo) Returning(value interface{}, columns ...string) IInternalBlogPostDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i internalBlogPostDo) Not(conds ...gen.Condition) IInternalBlogPostDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i internalBlogPostDo) Or(conds ...gen.Condition) IInternalBlogPostDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i internalBlogPostDo) Select(conds ...field.Expr) IInternalBlogPostDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i internalBlogPostDo) Where(conds ...gen.Condition) IInternalBlogPostDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i internalBlogPostDo) Order(conds ...field.Expr) IInternalBlogPostDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i internalBlogPostDo) Distinct(cols ...field.Expr) IInternalBlogPostDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i internalBlogPostDo) Omit(cols ...field.Expr) IInternalBlogPostDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i internalBlogPostDo) Join(table schema.Tabler, on ...field.Expr) IInternalBlogPostDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i internalBlogPostDo) LeftJoin(table schema.Tabler, on ...field.Expr) IInternalBlogPostDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i internalBlogPostDo) RightJoin(table schema.Tabler, on ...field.Expr) IInternalBlogPostDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i internalBlogPostDo) Group(cols ...field.Expr) IInternalBlogPostDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i internalBlogPostDo) Having(conds ...gen.Condition) IInternalBlogPostDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i internalBlogPostDo) Limit(limit int) IInternalBlogPostDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i internalBlogPostDo) Offset(offset int) IInternalBlogPostDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i internalBlogPostDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IInternalBlogPostDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i internalBlogPostDo) Unscoped() IInternalBlogPostDo {
	return i.withDO(i.DO.Unscoped())
}

func (i internalBlogPostDo) Create(values ...*model.InternalBlogPost) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i internalBlogPostDo) CreateInBatches(values []*model.InternalBlogPost, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i internalBlogPostDo) Save(values ...*model.InternalBlogPost) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i internalBlogPostDo) First() (*model.InternalBlogPost, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.InternalBlogPost), nil
	}
}

func (i internalBlogPostDo) Take() (*model.InternalBlogPost, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.InternalBlogPost), nil
	}
}

func (i internalBlogPostDo) Last() (*model.InternalBlogPost, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.InternalBlogPost), nil
	}
}

func (i internalBlogPostDo) Find() ([]*model.InternalBlogPost, error) {
	result, err := i.DO.Find()
	return result.([]*model.InternalBlogPost), err
}

func (i internalBlogPostDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.InternalBlogPost, err error) {
	buf := make([]*model.InternalBlogPost, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i internalBlogPostDo) FindInBatches(result *[]*model.InternalBlogPost, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i internalBlogPostDo) Attrs(attrs ...field.AssignExpr) IInternalBlogPostDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i internalBlogPostDo) Assign(attrs ...field.AssignExpr) IInternalBlogPostDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i internalBlogPostDo) Joins(fields ...field.RelationField) IInternalBlogPostDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i internalBlogPostDo) Preload(fields ...field.RelationField) IInternalBlogPostDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i internalBlogPostDo) FirstOrInit() (*model.InternalBlogPost, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.InternalBlogPost), nil
	}
}

func (i internalBlogPostDo) FirstOrCreate() (*model.InternalBlogPost, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.InternalBlogPost), nil
	}
}

func (i internalBlogPostDo) FindByPage(offset int, limit int) (result []*model.InternalBlogPost, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i internalBlogPostDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i internalBlogPostDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i internalBlogPostDo) Delete(models ...*model.InternalBlogPost) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *internalBlogPostDo) withDO(do gen.Dao) *internalBlogPostDo {
	i.DO = *do.(*gen.DO)
	return i
}
