// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models_generated

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/diggerhq/digger/next/model"
)

func newInternalChangelog(db *gorm.DB, opts ...gen.DOOption) internalChangelog {
	_internalChangelog := internalChangelog{}

	_internalChangelog.internalChangelogDo.UseDB(db, opts...)
	_internalChangelog.internalChangelogDo.UseModel(&model.InternalChangelog{})

	tableName := _internalChangelog.internalChangelogDo.TableName()
	_internalChangelog.ALL = field.NewAsterisk(tableName)
	_internalChangelog.ID = field.NewString(tableName, "id")
	_internalChangelog.Title = field.NewString(tableName, "title")
	_internalChangelog.Changes = field.NewString(tableName, "changes")
	_internalChangelog.UserID = field.NewString(tableName, "user_id")
	_internalChangelog.CreatedAt = field.NewTime(tableName, "created_at")
	_internalChangelog.UpdatedAt = field.NewTime(tableName, "updated_at")
	_internalChangelog.CoverImage = field.NewString(tableName, "cover_image")

	_internalChangelog.fillFieldMap()

	return _internalChangelog
}

type internalChangelog struct {
	internalChangelogDo

	ALL        field.Asterisk
	ID         field.String
	Title      field.String
	Changes    field.String
	UserID     field.String
	CreatedAt  field.Time
	UpdatedAt  field.Time
	CoverImage field.String

	fieldMap map[string]field.Expr
}

func (i internalChangelog) Table(newTableName string) *internalChangelog {
	i.internalChangelogDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i internalChangelog) As(alias string) *internalChangelog {
	i.internalChangelogDo.DO = *(i.internalChangelogDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *internalChangelog) updateTableName(table string) *internalChangelog {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewString(table, "id")
	i.Title = field.NewString(table, "title")
	i.Changes = field.NewString(table, "changes")
	i.UserID = field.NewString(table, "user_id")
	i.CreatedAt = field.NewTime(table, "created_at")
	i.UpdatedAt = field.NewTime(table, "updated_at")
	i.CoverImage = field.NewString(table, "cover_image")

	i.fillFieldMap()

	return i
}

func (i *internalChangelog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *internalChangelog) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 7)
	i.fieldMap["id"] = i.ID
	i.fieldMap["title"] = i.Title
	i.fieldMap["changes"] = i.Changes
	i.fieldMap["user_id"] = i.UserID
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["updated_at"] = i.UpdatedAt
	i.fieldMap["cover_image"] = i.CoverImage
}

func (i internalChangelog) clone(db *gorm.DB) internalChangelog {
	i.internalChangelogDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i internalChangelog) replaceDB(db *gorm.DB) internalChangelog {
	i.internalChangelogDo.ReplaceDB(db)
	return i
}

type internalChangelogDo struct{ gen.DO }

type IInternalChangelogDo interface {
	gen.SubQuery
	Debug() IInternalChangelogDo
	WithContext(ctx context.Context) IInternalChangelogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IInternalChangelogDo
	WriteDB() IInternalChangelogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IInternalChangelogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IInternalChangelogDo
	Not(conds ...gen.Condition) IInternalChangelogDo
	Or(conds ...gen.Condition) IInternalChangelogDo
	Select(conds ...field.Expr) IInternalChangelogDo
	Where(conds ...gen.Condition) IInternalChangelogDo
	Order(conds ...field.Expr) IInternalChangelogDo
	Distinct(cols ...field.Expr) IInternalChangelogDo
	Omit(cols ...field.Expr) IInternalChangelogDo
	Join(table schema.Tabler, on ...field.Expr) IInternalChangelogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IInternalChangelogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IInternalChangelogDo
	Group(cols ...field.Expr) IInternalChangelogDo
	Having(conds ...gen.Condition) IInternalChangelogDo
	Limit(limit int) IInternalChangelogDo
	Offset(offset int) IInternalChangelogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IInternalChangelogDo
	Unscoped() IInternalChangelogDo
	Create(values ...*model.InternalChangelog) error
	CreateInBatches(values []*model.InternalChangelog, batchSize int) error
	Save(values ...*model.InternalChangelog) error
	First() (*model.InternalChangelog, error)
	Take() (*model.InternalChangelog, error)
	Last() (*model.InternalChangelog, error)
	Find() ([]*model.InternalChangelog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.InternalChangelog, err error)
	FindInBatches(result *[]*model.InternalChangelog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.InternalChangelog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IInternalChangelogDo
	Assign(attrs ...field.AssignExpr) IInternalChangelogDo
	Joins(fields ...field.RelationField) IInternalChangelogDo
	Preload(fields ...field.RelationField) IInternalChangelogDo
	FirstOrInit() (*model.InternalChangelog, error)
	FirstOrCreate() (*model.InternalChangelog, error)
	FindByPage(offset int, limit int) (result []*model.InternalChangelog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IInternalChangelogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i internalChangelogDo) Debug() IInternalChangelogDo {
	return i.withDO(i.DO.Debug())
}

func (i internalChangelogDo) WithContext(ctx context.Context) IInternalChangelogDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i internalChangelogDo) ReadDB() IInternalChangelogDo {
	return i.Clauses(dbresolver.Read)
}

func (i internalChangelogDo) WriteDB() IInternalChangelogDo {
	return i.Clauses(dbresolver.Write)
}

func (i internalChangelogDo) Session(config *gorm.Session) IInternalChangelogDo {
	return i.withDO(i.DO.Session(config))
}

func (i internalChangelogDo) Clauses(conds ...clause.Expression) IInternalChangelogDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i internalChangelogDo) Returning(value interface{}, columns ...string) IInternalChangelogDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i internalChangelogDo) Not(conds ...gen.Condition) IInternalChangelogDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i internalChangelogDo) Or(conds ...gen.Condition) IInternalChangelogDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i internalChangelogDo) Select(conds ...field.Expr) IInternalChangelogDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i internalChangelogDo) Where(conds ...gen.Condition) IInternalChangelogDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i internalChangelogDo) Order(conds ...field.Expr) IInternalChangelogDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i internalChangelogDo) Distinct(cols ...field.Expr) IInternalChangelogDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i internalChangelogDo) Omit(cols ...field.Expr) IInternalChangelogDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i internalChangelogDo) Join(table schema.Tabler, on ...field.Expr) IInternalChangelogDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i internalChangelogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IInternalChangelogDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i internalChangelogDo) RightJoin(table schema.Tabler, on ...field.Expr) IInternalChangelogDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i internalChangelogDo) Group(cols ...field.Expr) IInternalChangelogDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i internalChangelogDo) Having(conds ...gen.Condition) IInternalChangelogDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i internalChangelogDo) Limit(limit int) IInternalChangelogDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i internalChangelogDo) Offset(offset int) IInternalChangelogDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i internalChangelogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IInternalChangelogDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i internalChangelogDo) Unscoped() IInternalChangelogDo {
	return i.withDO(i.DO.Unscoped())
}

func (i internalChangelogDo) Create(values ...*model.InternalChangelog) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i internalChangelogDo) CreateInBatches(values []*model.InternalChangelog, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i internalChangelogDo) Save(values ...*model.InternalChangelog) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i internalChangelogDo) First() (*model.InternalChangelog, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.InternalChangelog), nil
	}
}

func (i internalChangelogDo) Take() (*model.InternalChangelog, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.InternalChangelog), nil
	}
}

func (i internalChangelogDo) Last() (*model.InternalChangelog, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.InternalChangelog), nil
	}
}

func (i internalChangelogDo) Find() ([]*model.InternalChangelog, error) {
	result, err := i.DO.Find()
	return result.([]*model.InternalChangelog), err
}

func (i internalChangelogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.InternalChangelog, err error) {
	buf := make([]*model.InternalChangelog, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i internalChangelogDo) FindInBatches(result *[]*model.InternalChangelog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i internalChangelogDo) Attrs(attrs ...field.AssignExpr) IInternalChangelogDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i internalChangelogDo) Assign(attrs ...field.AssignExpr) IInternalChangelogDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i internalChangelogDo) Joins(fields ...field.RelationField) IInternalChangelogDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i internalChangelogDo) Preload(fields ...field.RelationField) IInternalChangelogDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i internalChangelogDo) FirstOrInit() (*model.InternalChangelog, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.InternalChangelog), nil
	}
}

func (i internalChangelogDo) FirstOrCreate() (*model.InternalChangelog, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.InternalChangelog), nil
	}
}

func (i internalChangelogDo) FindByPage(offset int, limit int) (result []*model.InternalChangelog, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i internalChangelogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i internalChangelogDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i internalChangelogDo) Delete(models ...*model.InternalChangelog) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *internalChangelogDo) withDO(do gen.Dao) *internalChangelogDo {
	i.DO = *do.(*gen.DO)
	return i
}
