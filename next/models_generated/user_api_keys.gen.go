// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models_generated

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/diggerhq/digger/next/model"
)

func newUserAPIKey(db *gorm.DB, opts ...gen.DOOption) userAPIKey {
	_userAPIKey := userAPIKey{}

	_userAPIKey.userAPIKeyDo.UseDB(db, opts...)
	_userAPIKey.userAPIKeyDo.UseModel(&model.UserAPIKey{})

	tableName := _userAPIKey.userAPIKeyDo.TableName()
	_userAPIKey.ALL = field.NewAsterisk(tableName)
	_userAPIKey.KeyID = field.NewString(tableName, "key_id")
	_userAPIKey.MaskedKey = field.NewString(tableName, "masked_key")
	_userAPIKey.CreatedAt = field.NewTime(tableName, "created_at")
	_userAPIKey.UserID = field.NewString(tableName, "user_id")
	_userAPIKey.ExpiresAt = field.NewTime(tableName, "expires_at")
	_userAPIKey.IsRevoked = field.NewBool(tableName, "is_revoked")

	_userAPIKey.fillFieldMap()

	return _userAPIKey
}

type userAPIKey struct {
	userAPIKeyDo

	ALL       field.Asterisk
	KeyID     field.String
	MaskedKey field.String
	CreatedAt field.Time
	UserID    field.String
	ExpiresAt field.Time
	IsRevoked field.Bool

	fieldMap map[string]field.Expr
}

func (u userAPIKey) Table(newTableName string) *userAPIKey {
	u.userAPIKeyDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userAPIKey) As(alias string) *userAPIKey {
	u.userAPIKeyDo.DO = *(u.userAPIKeyDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userAPIKey) updateTableName(table string) *userAPIKey {
	u.ALL = field.NewAsterisk(table)
	u.KeyID = field.NewString(table, "key_id")
	u.MaskedKey = field.NewString(table, "masked_key")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UserID = field.NewString(table, "user_id")
	u.ExpiresAt = field.NewTime(table, "expires_at")
	u.IsRevoked = field.NewBool(table, "is_revoked")

	u.fillFieldMap()

	return u
}

func (u *userAPIKey) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userAPIKey) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 6)
	u.fieldMap["key_id"] = u.KeyID
	u.fieldMap["masked_key"] = u.MaskedKey
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["expires_at"] = u.ExpiresAt
	u.fieldMap["is_revoked"] = u.IsRevoked
}

func (u userAPIKey) clone(db *gorm.DB) userAPIKey {
	u.userAPIKeyDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userAPIKey) replaceDB(db *gorm.DB) userAPIKey {
	u.userAPIKeyDo.ReplaceDB(db)
	return u
}

type userAPIKeyDo struct{ gen.DO }

type IUserAPIKeyDo interface {
	gen.SubQuery
	Debug() IUserAPIKeyDo
	WithContext(ctx context.Context) IUserAPIKeyDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserAPIKeyDo
	WriteDB() IUserAPIKeyDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserAPIKeyDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserAPIKeyDo
	Not(conds ...gen.Condition) IUserAPIKeyDo
	Or(conds ...gen.Condition) IUserAPIKeyDo
	Select(conds ...field.Expr) IUserAPIKeyDo
	Where(conds ...gen.Condition) IUserAPIKeyDo
	Order(conds ...field.Expr) IUserAPIKeyDo
	Distinct(cols ...field.Expr) IUserAPIKeyDo
	Omit(cols ...field.Expr) IUserAPIKeyDo
	Join(table schema.Tabler, on ...field.Expr) IUserAPIKeyDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserAPIKeyDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserAPIKeyDo
	Group(cols ...field.Expr) IUserAPIKeyDo
	Having(conds ...gen.Condition) IUserAPIKeyDo
	Limit(limit int) IUserAPIKeyDo
	Offset(offset int) IUserAPIKeyDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserAPIKeyDo
	Unscoped() IUserAPIKeyDo
	Create(values ...*model.UserAPIKey) error
	CreateInBatches(values []*model.UserAPIKey, batchSize int) error
	Save(values ...*model.UserAPIKey) error
	First() (*model.UserAPIKey, error)
	Take() (*model.UserAPIKey, error)
	Last() (*model.UserAPIKey, error)
	Find() ([]*model.UserAPIKey, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserAPIKey, err error)
	FindInBatches(result *[]*model.UserAPIKey, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserAPIKey) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserAPIKeyDo
	Assign(attrs ...field.AssignExpr) IUserAPIKeyDo
	Joins(fields ...field.RelationField) IUserAPIKeyDo
	Preload(fields ...field.RelationField) IUserAPIKeyDo
	FirstOrInit() (*model.UserAPIKey, error)
	FirstOrCreate() (*model.UserAPIKey, error)
	FindByPage(offset int, limit int) (result []*model.UserAPIKey, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserAPIKeyDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userAPIKeyDo) Debug() IUserAPIKeyDo {
	return u.withDO(u.DO.Debug())
}

func (u userAPIKeyDo) WithContext(ctx context.Context) IUserAPIKeyDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userAPIKeyDo) ReadDB() IUserAPIKeyDo {
	return u.Clauses(dbresolver.Read)
}

func (u userAPIKeyDo) WriteDB() IUserAPIKeyDo {
	return u.Clauses(dbresolver.Write)
}

func (u userAPIKeyDo) Session(config *gorm.Session) IUserAPIKeyDo {
	return u.withDO(u.DO.Session(config))
}

func (u userAPIKeyDo) Clauses(conds ...clause.Expression) IUserAPIKeyDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userAPIKeyDo) Returning(value interface{}, columns ...string) IUserAPIKeyDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userAPIKeyDo) Not(conds ...gen.Condition) IUserAPIKeyDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userAPIKeyDo) Or(conds ...gen.Condition) IUserAPIKeyDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userAPIKeyDo) Select(conds ...field.Expr) IUserAPIKeyDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userAPIKeyDo) Where(conds ...gen.Condition) IUserAPIKeyDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userAPIKeyDo) Order(conds ...field.Expr) IUserAPIKeyDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userAPIKeyDo) Distinct(cols ...field.Expr) IUserAPIKeyDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userAPIKeyDo) Omit(cols ...field.Expr) IUserAPIKeyDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userAPIKeyDo) Join(table schema.Tabler, on ...field.Expr) IUserAPIKeyDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userAPIKeyDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserAPIKeyDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userAPIKeyDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserAPIKeyDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userAPIKeyDo) Group(cols ...field.Expr) IUserAPIKeyDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userAPIKeyDo) Having(conds ...gen.Condition) IUserAPIKeyDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userAPIKeyDo) Limit(limit int) IUserAPIKeyDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userAPIKeyDo) Offset(offset int) IUserAPIKeyDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userAPIKeyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserAPIKeyDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userAPIKeyDo) Unscoped() IUserAPIKeyDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userAPIKeyDo) Create(values ...*model.UserAPIKey) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userAPIKeyDo) CreateInBatches(values []*model.UserAPIKey, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userAPIKeyDo) Save(values ...*model.UserAPIKey) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userAPIKeyDo) First() (*model.UserAPIKey, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAPIKey), nil
	}
}

func (u userAPIKeyDo) Take() (*model.UserAPIKey, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAPIKey), nil
	}
}

func (u userAPIKeyDo) Last() (*model.UserAPIKey, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAPIKey), nil
	}
}

func (u userAPIKeyDo) Find() ([]*model.UserAPIKey, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserAPIKey), err
}

func (u userAPIKeyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserAPIKey, err error) {
	buf := make([]*model.UserAPIKey, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userAPIKeyDo) FindInBatches(result *[]*model.UserAPIKey, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userAPIKeyDo) Attrs(attrs ...field.AssignExpr) IUserAPIKeyDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userAPIKeyDo) Assign(attrs ...field.AssignExpr) IUserAPIKeyDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userAPIKeyDo) Joins(fields ...field.RelationField) IUserAPIKeyDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userAPIKeyDo) Preload(fields ...field.RelationField) IUserAPIKeyDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userAPIKeyDo) FirstOrInit() (*model.UserAPIKey, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAPIKey), nil
	}
}

func (u userAPIKeyDo) FirstOrCreate() (*model.UserAPIKey, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAPIKey), nil
	}
}

func (u userAPIKeyDo) FindByPage(offset int, limit int) (result []*model.UserAPIKey, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userAPIKeyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userAPIKeyDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userAPIKeyDo) Delete(models ...*model.UserAPIKey) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userAPIKeyDo) withDO(do gen.Dao) *userAPIKeyDo {
	u.DO = *do.(*gen.DO)
	return u
}
